import asyncio
import re

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, InputFile
from aiogram.utils.exceptions import BadRequest

from config import CONFIG
from config.config import CONFIGTEXT
from crud import CRUDUsers
from crud.purchaseCRUD import CRUDPurchases
from crud.saleCRUD import CRUDSales
from handlers.AllCallbacks import admin_cb
from loader import bot
from states.admins.AdminState import AdminState

import pandas as pd


class AdminForm:

    @staticmethod
    async def back_ikb(target: str, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=admin_cb.new(target, action, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def change_ikb(get_change: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ö–æ–º–∏—Å—Å–∏–∏(0) –∏–ª–∏ –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç(1)
        :param get_change: –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —á—Ç–æ –≤—ã–±—Ä–∞–ª –∞–¥–º–∏–Ω 1 –∏–ª–∏ 0
        :return:
        """
        data = {"üîÅ –ò–∑–º–µ–Ω–∏—Ç—å": {"target": "PaymentSetup", "action": "get_change", "id": 1, "editId": get_change},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "PaymentSetup", "action": "get_Setup", "id": 2, "editId": get_change},
                }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editId"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def start_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:
        """
        data = {"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–ø–ª–∞—Ç—ã": {"target": "PaymentSetup", "action": "get_Setup", "id": 0, "editid": 0},
                "üì® –†–∞—Å—Å—ã–ª–∫–∞": {"target": "Newsletter", "action": "get_Newsletter", "id": 0, "editid": 0},
                "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞": {"target": "Text_change", "action": "get_–°hange", "id": 0, "editid": 0},
                "üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": {"target": "Users", "action": "get_Users", "id": 0, "editid": 0},
                "–ü—Ä–æ–¥–∞–∂–∞": {"target": "Sale", "action": "get_Sale", "id": 0, "editid": 0},
                "–ü–æ–∫—É–ø–∫–∞": {"target": "Buy", "action": "get_Buy", "id": 0, "editid": 0},
                "üìä –û—Ç—á–µ—Ç": {"target": "Report", "action": "get_Report", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def report_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∏", callback_data=admin_cb.new("Report", "ReportSale", 0, 0))
                ],
                [
                    InlineKeyboardButton(text="–ü–æ–∫—É–ø–∫–∏", callback_data=admin_cb.new("Report", "ReportBuy", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def Text_change_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:

        "–†–µ–∫–≤–∏–∑–∏—Ç—ã BYN": {"target": "Text_change", "action": "RequisitesBYN", "id": 0, "editid": 0},
                "–†–µ–∫–≤–∏–∑–∏—Ç—ã RUS": {"target": "Text_change", "action": "RequisitesRUS", "id": 0, "editid": 0},
        """
        data = {"–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ": {"target": "Text_change", "action": "FIRST_PAGE", "id": 0, "editid": 0},
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": {"target": "Text_change", "action": "MAIN_FORM", "id": 0, "editid": 0},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def newsletter_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:
        """
        data = {"üèû –ö–∞—Ä—Ç–∏–Ω–∫–∞": {"target": "Newsletter", "action": "get_Picture", "id": 0, "editid": 0},
                "üóí –¢–µ–∫—Å—Ç": {"target": "Newsletter", "action": "get_Text", "id": 0, "editid": 0},
                "üèû –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –¢–µ–∫—Å—Ç üóí": {"target": "Newsletter", "action": "get_PicTex", "id": 1, "editid": 0},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def payment_setup_ikb() -> InlineKeyboardMarkup:
        data = {
            "% –ö–æ–º–∏—Å—Å–∏—è –ü–æ–∫—É–ø–∫–∏": {"target": "PaymentSetup", "action": "get_CommissionBuy", "id": 0, "editId": 0},
            "% –ö–æ–º–∏—Å—Å–∏—è –ü—Ä–æ–¥–∞–∂–∏": {"target": "PaymentSetup", "action": "get_CommissionSale", "id": 0, "editId": 0},
            "üßæ –ï–†–ò–ü": {"target": "PaymentSetup", "action": "get_Settlement_Account", "id": 0, "editId": 0},
            "üëõ –ö–æ—à–µ–ª–µ–∫": {"target": "PaymentSetup", "action": "get_Wallet", "id": 0, "editId": 0},
            "‚è± –¢–∞–π–º–µ—Ä –æ–ø–ª–∞—Ç—ã": {"target": "PaymentSetup", "action": "get_Timer", "id": 0, "editId": 0},
            "üáßüáæ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ BYN": {"target": "PaymentSetup", "action": "get_MinBYN", "id": 0, "editId": 0},
            "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editId": 0},
        }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editId"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def process_admin_profile(callback: CallbackQuery = None, message: Message = None,
                                    state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith('admin'):
                data = admin_cb.parse(callback_data=callback.data)

                if data.get("target") == "StartMenu":
                    await callback.message.edit_text(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                                                     reply_markup=await AdminForm.start_ikb())

                elif data.get("target") == "PaymentSetup":
                    if data.get("action") == "get_Setup":
                        await callback.message.edit_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–ª–∞—Ç—ã",
                                                         reply_markup=await AdminForm.payment_setup_ikb())
                        await state.finish()

                    elif data.get("action") == "get_CommissionSale":
                        await callback.message.edit_text(text=f"–ö–æ–º–∏—Å—Å–∏—è –ü—Ä–æ–¥–∞–∂–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
                                                              f"{CONFIG.COMMISSION.COMMISSION_SALES}%",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="CommissionSale")
                                                         )

                    elif data.get("action") == "get_CommissionBuy":
                        await callback.message.edit_text(text=f"–ö–æ–º–∏—Å—Å–∏—è –ø–æ–∫—É–ø–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
                                                              f"{CONFIG.COMMISSION.COMMISSION_BUY}%",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="CommissionBuy")
                                                         )

                    elif data.get("action") == "get_Settlement_Account":
                        await callback.message.edit_text(text=f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
                                                              f"{CONFIGTEXT.RequisitesBYN.TEXT}",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="REQUISITES"),
                                                         parse_mode="HTML"
                                                         )
                        await AdminState.REQUISITES.set()

                    elif data.get("action") == "get_change":
                        get_change_data = str(data.get("editId"))
                        text, target, action = "", "", ""

                        if get_change_data == "CommissionSale":
                            text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ö–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1.__'"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.COMMISSIONSale.set()

                        if get_change_data == "CommissionBuy":
                            text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ü–æ–∫—É–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1.__'"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.COMMISSIONBuy.set()

                        elif get_change_data == "REQUISITES":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –†–∞—Å—á—ë—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.REQUISITES.set()

                        elif get_change_data == "TIMER":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢–∞–π–º–µ—Ä–∞ –≤ <b>–º–∏–Ω—É—Ç–∞—Ö</b>"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.Timer.set()

                        elif get_change_data == "MinBYN":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è BYN"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.MinBYN.set()

                        elif get_change_data == "FIRST_PAGE":
                            text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ Captcha"
                            target = "Text_change"
                            action = "get_–°hange"
                            await AdminState.FIRST_PAGE.set()

                        elif get_change_data == "MAIN_FORM":
                            text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"
                            target = "Text_change"
                            action = "get_–°hange"
                            await AdminState.MAIN_FORM.set()

                        elif get_change_data == "RequisitesBYN":
                            text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
                            target = "Text_change"
                            action = "get_–°hange"
                            await AdminState.RequisitesBYN.set()

                        elif get_change_data == "Wallet":
                            text = "–í–≤–µ–¥–∏—Ç–µ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ Bitcoin:"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.WALLET.set()

                        await callback.message.edit_text(text=text,
                                                         parse_mode="HTML",
                                                         reply_markup=await AdminForm.back_ikb(target=target,
                                                                                               action=action)
                                                         )

                    elif data.get("action") == "get_Timer":
                        await callback.message.edit_text(text=f"–¢–∞–π–º–µ—Ä: {CONFIG.PAYMENT_TIMER/60} –º–∏–Ω.",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="TIMER")
                                                         )
                        await AdminState.Timer.set()

                    elif data.get("action") == "get_MinBYN":
                        await callback.message.edit_text(text=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ BYN: {CONFIG.COMMISSION.MIN_BYN} —Ä—É–±.",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="MinBYN")
                                                         )
                        await AdminState.MinBYN.set()

                    elif data.get("action") == "get_Wallet":
                        await callback.message.edit_text(text=f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ Bitcoin: \n"
                                                              f"{CONFIGTEXT.Wallet.TEXT} ",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="Wallet")
                                                         )
                        await AdminState.WALLET.set()

                elif data.get("target") == "Newsletter":
                    await state.finish()

                    if data.get("action") == "get_Newsletter":
                        text = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–µ–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –∏–ª–∏ –∫—É—Ä—Å–∏–≤–æ–º, –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç–∏–ª—å –∫–æ–¥–∞ –∏–ª–∏ " \
                               "–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n" \
                               "–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤:\n" \
                               "b<b> —Ç–µ–∫—Å—Ç </b>/b - –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º\n" \
                               "i<i> —Ç–µ–∫—Å—Ç </i>/i - –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∏–≤–æ–º\n" \
                               "u<u> —Ç–µ–∫—Å—Ç </u>/u - –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º\n" \
                               "s<s> —Ç–µ–∫—Å—Ç </s>/s - –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n" \
                               "tg-spoiler<tg-spoiler> —Ç–µ–∫—Å—Ç </tg-spoiler>/tg-spoiler - –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–æ–π–ª–µ—Ä–∞, " \
                               "–∫–æ—Ç–æ—Ä–∞—è —Å–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n" \
                               "<a href='http://www.tg.com/'>—Ç–µ–∫—Å—Ç</a> - –°–æ–∑–¥–∞–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
                        await callback.message.edit_text(text=f"{text}",
                                                         reply_markup=await AdminForm.newsletter_ikb())
                        # await AdminState.Newsletter.set()

                    elif data.get('action') == "get_Picture":
                        id = data.get('id')
                        await state.update_data(id=id)
                        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!",
                                                         reply_markup=await AdminForm.back_ikb(
                                                             target="Newsletter",
                                                             action="get_Newsletter")
                                                         )
                        await AdminState.NewsletterPhoto.set()

                    elif data.get('action') == "get_Text":
                        id = data.get('id')
                        await state.update_data(id=id)
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                                         reply_markup=await AdminForm.back_ikb(
                                                             target="Newsletter",
                                                             action="get_Newsletter")
                                                         )
                        await AdminState.NewsletterText.set()

                    elif data.get('action') == "get_PicTex":
                        id = data.get('id')
                        await state.update_data(id=id)
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!",
                                                         reply_markup=await AdminForm.back_ikb(
                                                             target="Newsletter",
                                                             action="get_Newsletter")
                                                         )
                        await AdminState.NewsletterText.set()

                elif data.get('target') == "Report":
                    if data.get('action') == "get_Report":
                        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ",
                                                         reply_markup=await AdminForm.report_ikb())

                    elif data.get('action') == "ReportSale":
                        sales = await CRUDSales.get_all()
                        user_id = []
                        sale_id = []
                        currency = []
                        coin = []
                        erip = []
                        quantity = []
                        price_per_unit = []
                        commission = []
                        date = []
                        status = []
                        moneyDifference = []

                        for sale in sales:
                            user = await CRUDUsers.get(id=sale.user_id)
                            get_status = "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞" if sale.status else "–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞"

                            user_id.append(user.user_id)
                            sale_id.append(sale.sale_id)
                            price_per_unit.append(sale.price_per_unit)
                            currency.append(sale.currency)

                            quantity.append(sale.quantity)
                            coin.append(sale.coin)
                            erip.append(sale.erip)
                            commission.append(sale.commission)
                            date.append(sale.date)
                            status.append(get_status)
                            moneyDifference.append(sale.moneyDifference)

                        df = pd.DataFrame({
                            'user_id': user_id,
                            'id –ü—Ä–æ–¥–∞–∂–∏': sale_id,
                            '–ü–æ–ª—É—á–µ–Ω–æ': price_per_unit,
                            '–í–∞–ª—é—Ç–∞': currency,
                            '–ü—Ä–æ–¥–∞–Ω–æ': quantity,
                            '–ú–æ–Ω–µ—Ç–∞': coin,
                            '–ö–æ–º–∏—Å—Å–∏—è': commission,
                            '–†–∞–∑–Ω–∏—Ü–∞': moneyDifference,
                            '–ï–†–ò–ü': erip,
                            '–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏': date,
                            '–°—Ç–∞—Ç—É—Å': status
                        })
                        df.to_excel('Sale.xlsx')

                        await callback.message.answer_document(document=open('Sale.xlsx', 'rb'),
                                                               caption="–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω",
                                                               parse_mode="HTML"
                                                               )

                    elif data.get('action') == "ReportBuy":
                        sales = await CRUDPurchases.get_all()
                        user_id = []
                        purchase_id = []
                        currency = []
                        coin = []
                        wallet = []
                        quantity = []
                        price_per_unit = []
                        date = []
                        commission = []
                        status = []
                        moneyDifference = []

                        for sale in sales:
                            user = await CRUDUsers.get(id=sale.user_id)
                            get_status = "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞" if sale.status else "–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞"

                            user_id.append(user.user_id)
                            purchase_id.append(sale.purchase_id)
                            price_per_unit.append(sale.price_per_unit)
                            currency.append(sale.currency)

                            quantity.append(sale.quantity)
                            coin.append(sale.coin)
                            wallet.append(sale.wallet)
                            commission.append(sale.commission)
                            date.append(sale.date)
                            status.append(get_status)
                            moneyDifference.append(sale.moneyDifference)

                        df = pd.DataFrame({
                            'id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user_id,
                            'id –ü–æ–∫—É–ø–∫–∏': purchase_id,
                            '–ü–æ–ª—É—á–µ–Ω–æ': price_per_unit,
                            '–í–∞–ª—é—Ç–∞': currency,
                            '–ü—Ä–æ–¥–∞–Ω–æ': quantity,
                            '–ú–æ–Ω–µ—Ç–∞': coin,
                            '–†–∞–∑–Ω–∏—Ü–∞': moneyDifference,
                            '–ö–æ–º–∏—Å—Å–∏—è': commission,
                            '–ö–æ—à–µ–ª–µ–∫': wallet,
                            '–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏': date,
                            '–°—Ç–∞—Ç—É—Å': status
                        })
                        df.to_excel('Buy.xlsx')

                        await callback.message.answer_document(document=open('Buy.xlsx', 'rb'),
                                                               caption="–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω",
                                                               parse_mode="HTML"
                                                               )

                elif data.get('target') == "Text_change":
                    if data.get('action') == "get_–°hange":
                        await callback.message.edit_text(text="üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
                                                         reply_markup=await AdminForm.Text_change_ikb())

                    elif data.get("action") == "FIRST_PAGE":
                        await callback.message.edit_text(text=CONFIGTEXT.FIRST_PAGE.TEXT,
                                                         parse_mode="HTML",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="FIRST_PAGE")
                                                         )

                    elif data.get("action") == "MAIN_FORM":
                        await callback.message.edit_text(text=CONFIGTEXT.MAIN_FORM.TEXT,
                                                         parse_mode="HTML",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="MAIN_FORM")
                                                         )

                    elif data.get("action") == "RequisitesBYN":
                        await callback.message.edit_text(text=CONFIGTEXT.RequisitesBYN.TEXT,
                                                         parse_mode="HTML",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="RequisitesBYN")
                                                         )

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                if await state.get_state() == "AdminState:REQUISITES":
                    CONFIGTEXT.RequisitesBYN.TEXT = f"{message.text}"
                    await message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç",
                                         reply_markup=await AdminForm.start_ikb())
                    await state.finish()

                elif await state.get_state() == "AdminState:COMMISSIONSale":
                    if re.match(r'^1\.[0-9]{2}$', message.text):
                        CONFIG.COMMISSION.COMMISSION_SALES = message.text
                        await message.answer(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ö–æ–º–∏—Å—Å–∏—é –ü—Ä–æ–¥–∞–∂–∏ "
                                                  f"–Ω–∞ <code>{message.text}</code> %",
                                             parse_mode="HTML",
                                             reply_markup=await AdminForm.start_ikb())
                        await state.finish()
                    else:
                        await message.answer(text="–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ (1.__)")
                        await AdminState.COMMISSIONSale

                elif await state.get_state() == "AdminState:COMMISSIONBuy":
                    if re.match(r'^1\.[0-9]{2}$', message.text):
                        CONFIG.COMMISSION.COMMISSION_BUY = message.text
                        await message.answer(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ö–æ–º–∏—Å—Å–∏—é –ü–æ–∫—É–ø–∫–∏ –Ω–∞ "
                                                  f"<code>{message.text}</code> %",
                                             parse_mode="HTML",
                                             reply_markup=await AdminForm.start_ikb())
                        await state.finish()
                    else:
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                        await AdminState.COMMISSIONBuy

                elif await state.get_state() == "AdminState:MinBYN":
                    if message.text.isdigit():
                        CONFIG.COMMISSION.MIN_BYN = int(message.text)
                        await message.answer(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É "
                                                  f"<code>{int(message.text)} BYN</code>!",
                                             parse_mode='HTML',
                                             reply_markup=await AdminForm.start_ikb())
                        await state.finish()
                    else:
                        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
                        await AdminState.MinBYN.set()

                elif await state.get_state() == "AdminState:Timer":
                    if message.text.isdigit():
                        CONFIG.PAYMENT_TIMER = int(message.text) * 60
                        await message.answer(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –¢–∞–π–º–µ—Ä "
                                                  f"–Ω–∞ <code>{int(message.text)}</code> –º–∏–Ω—É—Ç(—ã)",
                                             reply_markup=await AdminForm.start_ikb(),
                                             parse_mode="HTML")
                        await state.finish()
                    else:
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                        await AdminState.Timer.set()

                elif await state.get_state() == "AdminState:FIRST_PAGE":
                    CONFIGTEXT.FIRST_PAGE.TEXT = message.text
                    await message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç",
                                         reply_markup=await AdminForm.start_ikb())
                    await state.finish()

                elif await state.get_state() == "AdminState:MAIN_FORM":
                    CONFIGTEXT.MAIN_FORM.TEXT = message.text
                    await message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç",
                                         reply_markup=await AdminForm.start_ikb())
                    await state.finish()

                elif await state.get_state() == "AdminState:WALLET":
                    CONFIGTEXT.Wallet.TEXT = message.text
                    await message.answer(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ Bitcoin\n"
                                              f"<code>{message.text}</code>\n\n",
                                         parse_mode="HTML",
                                         reply_markup=await AdminForm.start_ikb())
                    await state.finish()

                elif await state.get_state() == "AdminState:NewsletterText":
                    try:
                        get_state = await state.get_data()
                        if int(get_state['id']) == 1:
                            await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
                            await state.update_data(caption=message.text)
                            await AdminState.NewsletterPhoto.set()
                        else:
                            users = await CRUDUsers.get_all()

                            tasks = []
                            for user in users:
                                tasks.append(bot.send_message(chat_id=user.user_id,
                                                              text=message.text,
                                                              parse_mode="HTML"))
                            await asyncio.gather(*tasks, return_exceptions=True)

                            await state.finish()
                    except Exception as e:
                        print(e)

                elif await state.get_state() == "AdminState:NewsletterPhoto":
                    if message.content_type == "photo":
                        try:
                            state_id = await state.get_data()
                            users = await CRUDUsers.get_all()
                            if int(state_id['id']) == 1:
                                tasks = []
                                for user in users:
                                    tasks.append(bot.send_photo(chat_id=user.user_id, photo=message.photo[2].file_id,
                                                                caption=state_id['caption']))
                                await asyncio.gather(*tasks, return_exceptions=True)
                            else:
                                tasks = []
                                for user in users:
                                    tasks.append(bot.send_photo(chat_id=user.user_id, photo=message.photo[2].file_id))
                                await asyncio.gather(*tasks, return_exceptions=True)

                        except Exception as e:
                            print(e)

                        await state.finish()
                        await message.answer(text="–†–∞—Å—Å—ã–ª–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ",
                                             reply_markup=await AdminForm.start_ikb()
                                             )
                    else:
                        await message.answer(text="–≠—Ç–æ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞!\n"
                                                  "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                             reply_markup=await AdminForm.back_ikb(
                                                 target="Newsletter",
                                                 action="get_Newsletter")
                                             )
                        await AdminState.NewsletterPhoto.set()
