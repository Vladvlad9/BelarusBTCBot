from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, InputFile
from aiogram.utils.exceptions import BadRequest

from config import CONFIG
from config.config import CONFIGTEXT
# from crud import CRUDUsers, CRUDTransaction, CRUDCurrency, CRUDOperation
from handlers.AllCallbacks import admin_cb
from loader import bot
from states.admins.AdminState import AdminState

import pandas as pd


class AdminForm:

    @staticmethod
    async def back_ikb(target: str, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=admin_cb.new(target, action, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def change_ikb(get_change: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ö–æ–º–∏—Å—Å–∏–∏(0) –∏–ª–∏ –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç(1)
        :param get_change: –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —á—Ç–æ –≤—ã–±—Ä–∞–ª –∞–¥–º–∏–Ω 1 –∏–ª–∏ 0
        :return:
        """
        data = {"üîÅ –ò–∑–º–µ–Ω–∏—Ç—å": {"target": "PaymentSetup", "action": "get_change", "id": 1, "editId": get_change},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "PaymentSetup", "action": "get_Setup", "id": 2, "editId": get_change},
                }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editId"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def start_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:
        """
        data = {"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–ø–ª–∞—Ç—ã": {"target": "PaymentSetup", "action": "get_Setup", "id": 0, "editid": 0},
                "üì® –†–∞—Å—Å—ã–ª–∫–∞": {"target": "Newsletter", "action": "get_Newsletter", "id": 0, "editid": 0},
                "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞": {"target": "Text_change", "action": "get_–°hange", "id": 0, "editid": 0},
                "üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": {"target": "Users", "action": "get_Users", "id": 0, "editid": 0},
                "üìä –û—Ç—á–µ—Ç": {"target": "Report", "action": "get_Report", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def Text_change_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:

        "–†–µ–∫–≤–∏–∑–∏—Ç—ã BYN": {"target": "Text_change", "action": "RequisitesBYN", "id": 0, "editid": 0},
                "–†–µ–∫–≤–∏–∑–∏—Ç—ã RUS": {"target": "Text_change", "action": "RequisitesRUS", "id": 0, "editid": 0},
        """
        data = {"–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ": {"target": "Text_change", "action": "FIRST_PAGE", "id": 0, "editid": 0},
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": {"target": "Text_change", "action": "MAIN_FORM", "id": 0, "editid": 0},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def newsletter_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:
        """
        data = {"üèû –ö–∞—Ä—Ç–∏–Ω–∫–∞": {"target": "Newsletter", "action": "get_Picture", "id": 0, "editid": 0},
                "üóí –¢–µ–∫—Å—Ç": {"target": "Newsletter", "action": "get_Text", "id": 0, "editid": 0},
                "üèû –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –¢–µ–∫—Å—Ç üóí": {"target": "Newsletter", "action": "get_PicTex", "id": 1, "editid": 0},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def payment_setup_ikb() -> InlineKeyboardMarkup:
        data = {"% –ö–æ–º–∏—Å—Å–∏—è": {"target": "PaymentSetup", "action": "get_Commission", "id": 0, "editId": 0},
                "üßæ –†–∞—Å—á–µ—Ç–Ω—ã–π –°—á–µ—Ç": {"target": "PaymentSetup", "action": "get_Settlement_Account", "id": 0,
                                      "editId": 0},
                "‚è± –¢–∞–π–º–µ—Ä –æ–ø–ª–∞—Ç—ã": {"target": "PaymentSetup", "action": "get_Timer", "id": 0, "editId": 0},
                "üáßüáæ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ BYN": {"target": "PaymentSetup", "action": "get_MinBYN", "id": 0, "editId": 0},
                "üá∑üá∫ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ RUB": {"target": "PaymentSetup", "action": "get_MinRUB", "id": 0, "editId": 0},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editId": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editId"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def process_admin_profile(callback: CallbackQuery = None, message: Message = None,
                                    state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith('admin'):
                data = admin_cb.parse(callback_data=callback.data)

                if data.get("target") == "StartMenu":
                    await callback.message.edit_text(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                                                     reply_markup=await AdminForm.start_ikb())

                elif data.get("target") == "PaymentSetup":
                    if data.get("action") == "get_Setup":
                        await callback.message.edit_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–ª–∞—Ç—ã",
                                                         reply_markup=await AdminForm.payment_setup_ikb())
                        await state.finish()

                    elif data.get("action") == "get_Commission":
                        await callback.message.edit_text(text=f"–ö–æ–º–∏—Å—Å–∏—è –ø–æ–∫—É–ø–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
                                                              f"{int(CONFIG.COMMISSION.COMMISSION_BUY)}%",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="COMMISSION")
                                                         )

                    elif data.get("action") == "get_Settlement_Account":
                        await callback.message.edit_text(text=f"–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç <i>{CONFIG.PAYMENT.REQUISITES}</i>",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="REQUISITES"),
                                                         parse_mode="HTML"
                                                         )

                    elif data.get("action") == "get_change":
                        get_change_data = str(data.get("editId"))
                        text, target, action = "", "", ""

                        if get_change_data == "COMMISSION":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ö–æ–º–∏—Å—Å–∏–∏"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.COMMISSION.set()

                        elif get_change_data == "REQUISITES":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –†–∞—Å—á—ë—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.REQUISITES.set()

                        elif get_change_data == "TIMER":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢–∞–π–º–µ—Ä–∞"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.Timer.set()

                        elif get_change_data == "MinBYN":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è BYN"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.MinBYN.set()

                        elif get_change_data == "MinRUB":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è RUB"
                            target = "PaymentSetup"
                            action = "get_Setup"
                            await AdminState.MinBYN.set()

                        elif get_change_data == "FIRST_PAGE":
                            text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"
                            target = "Text_change"
                            action = "get_–°hange"
                            await AdminState.FIRST_PAGE.set()

                        elif get_change_data == "MAIN_FORM":
                            text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"
                            target = "Text_change"
                            action = "get_–°hange"
                            await AdminState.MAIN_FORM.set()

                        elif get_change_data == "RequisitesBYN":
                            text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
                            target = "Text_change"
                            action = "get_–°hange"
                            await AdminState.RequisitesBYN.set()

                        elif get_change_data == "RequisitesRUS":
                            text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
                            target = "Text_change"
                            action = "get_–°hange"
                            await AdminState.RequisitesRUS.set()

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await AdminForm.back_ikb(target=target,
                                                                                               action=action)
                                                         )

                    elif data.get("action") == "get_Timer":
                        await callback.message.edit_text(text=f"–¢–∞–π–º–µ—Ä: {CONFIG.PAYMENT_TIMER} —Å–µ–∫",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="TIMER")
                                                         )
                        await AdminState.Timer.set()

                    elif data.get("action") == "get_MinBYN":
                        await callback.message.edit_text(text=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ BYN: {CONFIG.COMMISSION.MIN_BYN} —Ä—É–±.",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="MinBYN")
                                                         )
                        await AdminState.MinBYN.set()

                    elif data.get("action") == "get_MinRUB":
                        await callback.message.edit_text(text=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ RUB: {CONFIG.COMMISSION.MIN_RUB} —Ä—É–±.",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="MinRUB")
                                                         )
                        await AdminState.MinRUB.set()

                elif data.get("target") == "Newsletter":
                    await state.finish()

                    if data.get("action") == "get_Newsletter":
                        text = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–µ–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –∏–ª–∏ –∫—É—Ä—Å–∏–≤–æ–º, –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç–∏–ª—å –∫–æ–¥–∞ –∏–ª–∏ " \
                               "–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n" \
                               "–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤:\n" \
                               "b<b> —Ç–µ–∫—Å—Ç </b>/b - –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º\n" \
                               "i<i> —Ç–µ–∫—Å—Ç </i>/i - –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∏–≤–æ–º\n" \
                               "u<u> —Ç–µ–∫—Å—Ç </u>/u - –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º\n" \
                               "s<s> —Ç–µ–∫—Å—Ç </s>/s - –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n" \
                               "tg-spoiler<tg-spoiler> —Ç–µ–∫—Å—Ç </tg-spoiler>/tg-spoiler - –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–æ–π–ª–µ—Ä–∞, " \
                               "–∫–æ—Ç–æ—Ä–∞—è —Å–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n" \
                               "<a href='http://www.tg.com/'>—Ç–µ–∫—Å—Ç</a> - –°–æ–∑–¥–∞–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
                        await callback.message.edit_text(text=f"{text}",
                                                         reply_markup=await AdminForm.newsletter_ikb())
                        # await AdminState.Newsletter.set()

                    elif data.get('action') == "get_Picture":
                        id = data.get('id')
                        await state.update_data(id=id)
                        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!",
                                                         reply_markup=await AdminForm.back_ikb(
                                                             target="Newsletter",
                                                             action="get_Newsletter")
                                                         )
                        await AdminState.NewsletterPhoto.set()

                    elif data.get('action') == "get_Text":
                        id = data.get('id')
                        await state.update_data(id=id)
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                                         reply_markup=await AdminForm.back_ikb(
                                                             target="Newsletter",
                                                             action="get_Newsletter")
                                                         )
                        await AdminState.NewsletterText.set()

                    elif data.get('action') == "get_PicTex":
                        id = data.get('id')
                        await state.update_data(id=id)
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!",
                                                         reply_markup=await AdminForm.back_ikb(
                                                             target="Newsletter",
                                                             action="get_Newsletter")
                                                         )
                        await AdminState.NewsletterText.set()

                # elif data.get('target') == "Report":
                #     if data.get('action') == "get_Report":
                #         transactions = await CRUDTransaction.get_all()
                #         user_id = []
                #         exchange_rate = []
                #         buy_BTC = []
                #         sale = []
                #         wallet = []
                #         date_created = []
                #         currency_id = []
                #         operation_id = []
                #         for transaction in transactions:
                #             user = await CRUDUsers.get(id=transaction.user_id)
                #             currency = await CRUDCurrency.get(currency_id=int(transaction.currency_id))
                #             operation = await CRUDOperation.get(operation_id=int(transaction.operation_id))
                #             user_id.append(user.user_id)
                #             exchange_rate.append(transaction.exchange_rate)
                #             sale.append(transaction.sale)
                #
                #             currency_id.append(currency.name)
                #             wallet.append(transaction.wallet)
                #             date_created.append(transaction.date_created)
                #             buy_BTC.append(transaction.buy_BTC)
                #             operation_id.append(operation.name)
                #
                #         df = pd.DataFrame({
                #             'user_id': user_id,
                #             '–ö—É—Ä—Å –æ–±–º–µ–Ω–∞': exchange_rate,
                #             '–ö—É–ø–ª–µ–Ω–æ BTC': buy_BTC,
                #             '–ü—Ä–æ–¥–∞–Ω–æ': sale,
                #             '–í–∞–ª—é—Ç–∞': currency_id,
                #             '–∫–æ—à–µ–ª–µ–∫': wallet,
                #             '–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏': date_created,
                #             '–û–ø–µ—Ä–∞—Ü–∏—è': operation_id
                #         })
                #         df.to_excel('–û—Ç—á–µ—Ç.xlsx')
                #
                #         await callback.message.answer_document(document=open('–û—Ç—á–µ—Ç.xlsx', 'rb'),
                #                                                caption="–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω",
                #                                                parse_mode="HTML"
                #                                                )

                elif data.get('target') == "Text_change":
                    if data.get('action') == "get_–°hange":
                        await callback.message.edit_text(text="üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
                                                         reply_markup=await AdminForm.Text_change_ikb())

                    elif data.get("action") == "FIRST_PAGE":
                        await callback.message.edit_text(text=CONFIGTEXT.FIRST_PAGE.TEXT,
                                                         parse_mode="HTML",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="FIRST_PAGE")
                                                         )

                    elif data.get("action") == "MAIN_FORM":
                        await callback.message.edit_text(text=CONFIGTEXT.MAIN_FORM.TEXT,
                                                         parse_mode="HTML",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="MAIN_FORM")
                                                         )

                    elif data.get("action") == "RequisitesBYN":
                        await callback.message.edit_text(text=CONFIGTEXT.RequisitesBYN.TEXT,
                                                         parse_mode="HTML",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="RequisitesBYN")
                                                         )

                    elif data.get("action") == "RequisitesRUS":
                        await callback.message.edit_text(text=CONFIGTEXT.RequisitesRUS.TEXT,
                                                         parse_mode="HTML",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="RequisitesRUS")
                                                         )

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                if await state.get_state() == "AdminState:COMMISSION":
                    pass