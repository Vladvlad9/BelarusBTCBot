import random

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, MediaGroup, InputFile
from aiogram.utils.exceptions import BadRequest

from crud import CRUDUsers
from crud.purchaseCRUD import CRUDPurchases
from crud.saleCRUD import CRUDSales
from handlers.AllCallbacks import admin_cb, user_cb
from keyboards.inline.admin.admin import AdminForm
from loader import bot
from states.admins.AdminState import AdminState


class Users:

    @staticmethod
    async def back_ikb(target: str, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=admin_cb.new(target, action, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def sell_or_buy_ikb(user_id: int) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–æ–∫—É–ø–∫–∞",
                                         callback_data=user_cb.new("UsersId", "Buying", 0, user_id, 0))
                ],
                [
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞",
                                         callback_data=user_cb.new("UsersId", "Sale", 0, user_id, 0))
                ],
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=user_cb.new("Profile", "get_Profile", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def check_confirmation_ikb(target: str,
                                     user_id: int,
                                     sale_id: int,
                                     page: int = 0,
                                     getSale=False,
                                     action_back: str = None,
                                     action_confirm: str = None) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user_id: id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param page: –Ω–µ –æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        :param action_back: –Ω–µ –æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        :param action_confirm: –Ω–µ –æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        :return:
        """

        user = await CRUDUsers.get(id=user_id)
        chat = await bot.get_chat(chat_id=user.user_id)
        button_url = chat.user_url

        data = {
            "‚úÖ –ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –û–ø–ª–∞—Ç—É": {
                "target": target,
                "action": action_confirm,
                "pagination": getSale,
                "id": sale_id,
                "editid": user_id
            },

            "‚óÄÔ∏è –ù–∞–∑–∞–¥": {
                "target": target, "action": action_back, "pagination": "", "id": page, "editid": user_id},
        }
        if getSale:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üì≤ –°–≤—è–∑–∞—Ç—å—Å—è", url=button_url),
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=user_cb.new(target, action_back, 0, page, user_id))
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                                    [
                                        InlineKeyboardButton(text="üì≤ –°–≤—è–∑–∞—Ç—å—Å—è", url=button_url)
                                    ]

                                ] + [
                                    [
                                        InlineKeyboardButton(text=name, callback_data=user_cb.new(name_items["target"],
                                                                                                  name_items["action"],
                                                                                                  name_items[
                                                                                                      "pagination"],
                                                                                                  name_items["id"],
                                                                                                  name_items["editid"])
                                                             )
                                    ] for name, name_items in data.items()
                                ]
            )

    @staticmethod
    async def users_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏

        :return:
        """
        data = {
            # "#Ô∏è‚É£ –ù–æ–º–µ—Ä —á–µ–∫–∞": {
            #     "target": "UsersCheck",
            #     "action": "get_CheckNumber",
            #     "pagination": "",
            #     "id": 0,
            #     "editid": 0
            # },

            "üÜî id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": {
                "target": "UsersId",
                "action": "get_UsersId",
                "pagination": "",
                "id": 0,
                "editid": 0
            },
        }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=name, callback_data=user_cb.new(name_items["target"],
                                                                                              name_items["action"],
                                                                                              name_items["pagination"],
                                                                                              name_items["id"],
                                                                                              name_items["editid"]))
                                ] for name, name_items in data.items()

                            ] + [
                                [
                                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                                         callback_data=user_cb.new("MainMenu", "", 0, 0, 0))
                                ]
                            ]
        )

    @staticmethod
    async def pagination_bue_ikb(target: str,
                                 user_id: int = None,
                                 action: str = None,
                                 page: int = 0) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param action_back:
        :param target:  –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        :return:
        """
        if user_id:
            orders = await CRUDPurchases.get_all(user_id=user_id)
        # else:
        #     orders = await CRUDTransaction.get_all()

        orders_count = len(orders)

        prev_page: int
        next_page: int

        if page == 0:
            prev_page = orders_count - 1
            next_page = page + 1
        elif page == orders_count - 1:
            prev_page = page - 1
            next_page = 0
        else:
            prev_page = page - 1
            next_page = page + 1

        back_ikb = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=user_cb.new("User", "get_User", 0, 0, user_id))
        prev_page_ikb = InlineKeyboardButton("‚Üê", callback_data=user_cb.new(target, action, 0, prev_page, user_id))
        check = InlineKeyboardButton("‚ò∞", callback_data=user_cb.new("UsersId",
                                                                    "get_check_buy", 0, page, user_id))
        page = InlineKeyboardButton(f"{str(page + 1)}/{str(orders_count)}",
                                    callback_data=user_cb.new("", "", 0, 0, 0))
        next_page_ikb = InlineKeyboardButton("‚Üí", callback_data=user_cb.new(target, action, 0, next_page, user_id))

        if orders_count == 1:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        check
                    ],
                    [
                        back_ikb
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        prev_page_ikb,
                        page, check,
                        next_page_ikb,
                    ],
                    [
                        back_ikb
                    ]
                ]
            )

    @staticmethod
    async def buy_ikb() -> InlineKeyboardMarkup:
        buyTrue = list(filter(lambda x: x.status, await CRUDPurchases.get_all()))
        buyFalse = list(filter(lambda x: x.status == False, await CRUDPurchases.get_all()))

        data = {
            f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ ({len(buyTrue)})": {
                "target": "Buy",
                "action": "BuyTrue",
                "pagination": "",
                "id": "Yes",
                "editid": 0
            },

            f"‚ùå –ù–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ ({len(buyFalse)})": {
                "target": "Buy",
                "action": "BuyFalse",
                "pagination": "",
                "id": "No",
                "editid": 0
            },
        }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=name, callback_data=user_cb.new(name_items["target"],
                                                                                              name_items["action"],
                                                                                              name_items["pagination"],
                                                                                              name_items["id"],
                                                                                              name_items["editid"]))
                                ] for name, name_items in data.items()

                            ] + [
                                [
                                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                                         callback_data=user_cb.new("MainMenu", "", 0, 0, 0))
                                ]
                            ]
        )

    @staticmethod
    async def sales_ikb() -> InlineKeyboardMarkup:
        salesTrue = list(filter(lambda x: x.status, await CRUDSales.get_all()))
        salesFalse = list(filter(lambda x: x.status == False, await CRUDSales.get_all()))

        data = {
            f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ ({len(salesTrue)})": {
                "target": "Sale",
                "action": "SaleTrue",
                "pagination": "",
                "id": "Yes",
                "editid": 0
            },

            f"‚ùå –ù–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ ({len(salesFalse)})": {
                "target": "Sale",
                "action": "SaleFalse",
                "pagination": "",
                "id": "No",
                "editid": 0
            },
        }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=name, callback_data=user_cb.new(name_items["target"],
                                                                                              name_items["action"],
                                                                                              name_items["pagination"],
                                                                                              name_items["id"],
                                                                                              name_items["editid"]))
                                ] for name, name_items in data.items()

                            ] + [
                                [
                                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                                         callback_data=user_cb.new("MainMenu", "", 0, 0, 0))
                                ]
                            ]
        )

    @staticmethod
    async def pagination_sales_ikb(target: str,
                                   user_id: int = None,
                                   action: str = None,
                                   getSale: bool = False,
                                   page: int = 0) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param getSale:
        :param action_back:
        :param target:  –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        :return:
        """
        if getSale:
            orders = list(filter(lambda x: x.status, await CRUDSales.get_all()))
            approved = True
        else:
            approved = False
            orders = list(filter(lambda x: x.status == False, await CRUDSales.get_all()))

        orders_count = len(orders)

        prev_page: int
        next_page: int

        if page == 0:
            prev_page = orders_count - 1
            next_page = page + 1
        elif page == orders_count - 1:
            prev_page = page - 1
            next_page = 0
        else:
            prev_page = page - 1
            next_page = page + 1

        back_ikb = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=admin_cb.new("Sale", "get_Sale", 0, user_id))
        prev_page_ikb = InlineKeyboardButton("‚Üê", callback_data=user_cb.new(target, action, 0, prev_page, user_id))
        check = InlineKeyboardButton("‚ò∞", callback_data=user_cb.new("Sale",
                                                                    "saleCheckApproved", bool(approved), page, user_id))
        page = InlineKeyboardButton(f"{str(page + 1)}/{str(orders_count)}",
                                    callback_data=user_cb.new("", "", 0, 0, 0))
        next_page_ikb = InlineKeyboardButton("‚Üí", callback_data=user_cb.new(target, action, 0, next_page, user_id))

        if orders_count == 1:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        check
                    ],
                    [
                        back_ikb
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        prev_page_ikb,
                        page, check,
                        next_page_ikb,
                    ],
                    [
                        back_ikb
                    ]
                ]
            )

    @staticmethod
    async def pagination_buy_ikb(target: str,
                                   user_id: int = None,
                                   action: str = None,
                                   getBuy: bool = False,
                                   page: int = 0) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param getBuy:
        :param action_back:
        :param target:  –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        :return:
        """
        if getBuy:
            orders = list(filter(lambda x: x.status, await CRUDPurchases.get_all()))
            approved = True
        else:
            approved = False
            orders = list(filter(lambda x: x.status == False, await CRUDPurchases.get_all()))

        orders_count = len(orders)

        prev_page: int
        next_page: int

        if page == 0:
            prev_page = orders_count - 1
            next_page = page + 1
        elif page == orders_count - 1:
            prev_page = page - 1
            next_page = 0
        else:
            prev_page = page - 1
            next_page = page + 1

        back_ikb = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=admin_cb.new("Buy", "get_Buy", 0, user_id))
        prev_page_ikb = InlineKeyboardButton("‚Üê", callback_data=user_cb.new(target, action, 0, prev_page, user_id))
        check = InlineKeyboardButton("‚ò∞", callback_data=user_cb.new("Buy",
                                                                    "buyCheckApproved", bool(approved), page, user_id))
        page = InlineKeyboardButton(f"{str(page + 1)}/{str(orders_count)}",
                                    callback_data=user_cb.new("_", "_", 0, 0, 0))
        next_page_ikb = InlineKeyboardButton("‚Üí", callback_data=user_cb.new(target, action, 0, next_page, user_id))

        if orders_count == 1:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        check
                    ],
                    [
                        back_ikb
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        prev_page_ikb,
                        page, check,
                        next_page_ikb,
                    ],
                    [
                        back_ikb
                    ]
                ]
            )

    @staticmethod
    async def process_admin_profile(callback: CallbackQuery = None, message: Message = None,
                                    state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith('admin'):
                data = admin_cb.parse(callback_data=callback.data)

                if data.get("target") == "Users":

                    if data.get("action") == "get_Users":
                        try:
                            await callback.message.edit_text(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                             reply_markup=await Users.users_ikb())
                        except BadRequest:
                            await callback.message.delete()
                            await callback.message.answer(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                          reply_markup=await Users.users_ikb())

                elif data.get("target") == "Sale":
                    if data.get('action') == "get_Sale":
                        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!',
                                                         reply_markup=await Users.sales_ikb())

                elif data.get("target") == "Buy":
                    if data.get('action') == "get_Buy":
                        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!',
                                                         reply_markup=await Users.buy_ikb())

            elif callback.data.startswith('user'):
                data = user_cb.parse(callback_data=callback.data)

                if data.get("target") == "MainMenu":
                    await callback.message.edit_text(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                                                     reply_markup=await AdminForm.start_ikb())

                # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
                if data.get("target") == "User":
                    if data.get("action") == "get_User":
                        try:
                            await callback.message.edit_text(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                             reply_markup=await Users.users_ikb())
                        except BadRequest:
                            await callback.message.delete()
                            await callback.message.answer(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                          reply_markup=await Users.users_ikb())

                # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
                elif data.get("target") == "UsersId":

                    # –ü–æ–∏—Å–∫ –ø–æ id
                    if data.get("action") == "get_UsersId":
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                         reply_markup=await Users.back_ikb(target="Users",
                                                                                           action="get_Users")
                                                         )
                        await AdminState.UsersId.set()

                    elif data.get('action') == "Buying":
                        user_id = int(data.get('id'))
                        user = await CRUDUsers.get(user_id=user_id)
                        buy = await CRUDPurchases.get_all(user_id=user.id)
                        if buy:
                            status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if buy[0].status else "‚ùå –ù–µ –æ–¥–æ–±—Ä–µ–Ω–∞"

                            text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É {len(buy)}\n" \
                                   f"–ó–∞—è–≤–∫–∞ ‚Ññ {buy[0].purchase_id}\n\n" \
                                   f"–î–∞—Ç–∞ {buy[0].date}\n" \
                                   f"–ü–æ–∫—É–ø–∫–∞: {buy[0].coin} - {buy[0].quantity}\n" \
                                   f"–ó–∞–ø–ª–∞—Ç–∏–ª: {buy[0].currency} - {buy[0].price_per_unit}\n\n" \
                                   f"–ö–æ—à–µ–ª–µ–∫: {buy[0].wallet}\n\n" \
                                   f"–°—Ç–∞—Ç—É—Å: {status}"

                            await callback.message.edit_text(text=text,
                                                             reply_markup=await Users.pagination_bue_ikb(
                                                                 target="UsersId",
                                                                 user_id=user.id,
                                                                 action="Buying_pagination"))
                        else:
                            await callback.message.edit_text(text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª —Å —Ç–∞–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                    elif data.get('action') == "Buying_pagination":
                        user_id = int(data.get('editId'))
                        page = int(data.get('id'))
                        buy = await CRUDPurchases.get_all(user_id=user_id)

                        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if buy[page].status else "‚ùå –ù–µ –æ–¥–æ–±—Ä–µ–Ω–∞"

                        text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É {len(buy)}\n" \
                               f"–ó–∞—è–≤–∫–∞ ‚Ññ {buy[page].purchase_id}\n\n" \
                               f"–î–∞—Ç–∞ {buy[page].date}\n" \
                               f"–ü–æ–∫—É–ø–∫–∞: {buy[page].coin} - {buy[page].quantity}\n" \
                               f"–ó–∞–ø–ª–∞—Ç–∏–ª: {buy[page].currency} - {buy[page].price_per_unit}\n\n" \
                               f"–ö–æ—à–µ–ª–µ–∫: {buy[page].wallet}\n\n" \
                               f"–°—Ç–∞—Ç—É—Å: {status}"

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await Users.pagination_bue_ikb(
                                                             target="UsersId",
                                                             user_id=user_id,
                                                             page=page,
                                                             action="Buying_pagination"))

                    elif data.get('action') == "Sale":
                        user_id = int(data.get('id'))
                        user = await CRUDUsers.get(user_id=user_id)
                        salle = await CRUDSales.get_all(user_id=user.id)

                        if salle:
                            status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if salle[0].status else "‚ùå –ù–µ –æ–¥–æ–±—Ä–µ–Ω–∞"

                            text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É {len(salle)}\n" \
                                   f"–ó–∞—è–≤–∫–∞ ‚Ññ {salle[0].purchase_id}\n\n" \
                                   f"–î–∞—Ç–∞ {salle[0].date}\n" \
                                   f"–ü—Ä–æ–¥–∞–ª: {salle[0].currency} - {salle[0].price_per_unit}\n" \
                                   f"–ó–∞–ø–ª–∞—Ç–∏–ª: {salle[0].coin} - {salle[0].quantity}\n\n" \
                                   f"–ï–†–ò–ü: {salle[0].erip}\n\n" \
                                   f"–°—Ç–∞—Ç—É—Å: {status}"

                            await callback.message.edit_text(text=text,
                                                             reply_markup=await Users.pagination_bue_ikb(
                                                                 target="UsersId",
                                                                 user_id=user.id,
                                                                 action="Buying_pagination"))
                        else:
                            await callback.message.edit_text(text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª —Å —Ç–∞–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                    elif data.get("action") == "get_check_buy":
                        page = int(data.get('id'))
                        get_user_id = int(data.get('editId'))

                        user = await CRUDUsers.get(id=get_user_id)
                        transaction = await CRUDPurchases.get_all(user_id=user.id)
                        if transaction:
                            text = f"text tut"

                            await state.update_data(id=get_user_id)
                            await state.update_data(page=page)
                            await state.update_data(check_number=False)

                            if transaction[page].purchase_id != "None":
                                try:
                                    await callback.message.delete()
                                    photo = open(f'user_check/{transaction[page].purchase_id}_{user.user_id}.jpg', 'rb')
                                    await bot.send_photo(chat_id=callback.from_user.id, photo=photo,
                                                         caption=f"<i>–°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                                 f"{text}",
                                                         reply_markup=await Users.check_confirmation_ikb(
                                                             page=page,
                                                             user_id=user.id,
                                                             target="UsersId",
                                                             action_back="pagination_user_transaction",
                                                             action_confirm="Confirmation_Transaction")
                                                         )
                                    pass
                                except FileNotFoundError:
                                    pass
                            else:
                                await callback.message.edit_text(text=f"<i>–°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                                      f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–∏–ª —á–µ–∫\n\n"
                                                                      f"{text}",
                                                                 reply_markup=await Users.check_confirmation_ikb(
                                                                     page=page,
                                                                     user_id=user.id,
                                                                     target="UsersId",
                                                                     action_back="pagination_user_transaction",
                                                                     action_confirm="Confirmation_Transaction")
                                                                 )
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                                                             reply_markup=await Users.back_ikb(target="Users",
                                                                                               action="get_Users")
                                                             )

                elif data.get('target') == "Sale":
                    if data.get('action') == "SaleTrue":
                        salesTrue = list(filter(lambda x: x.status, await CRUDSales.get_all()))

                        if salesTrue:
                            user = await CRUDUsers.get(id=salesTrue[0].user_id)
                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {salesTrue[0].sale_id}\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id {user}\n" \
                                   f"–ü—Ä–æ–¥–∞–µ—Ç {salesTrue[0].coin} - {salesTrue[0].quantity}\n" \
                                   f"–ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {salesTrue[0].price_per_unit} - {salesTrue[0].currency}\n\n" \
                                   f"–ï–†–ò–ü - {salesTrue[0].erip}\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - {salesTrue[0].date}"
                            await callback.message.edit_text(text=text,
                                                             reply_markup=await Users.pagination_sales_ikb(
                                                                 target="Sale",
                                                                 user_id=user.user_id,
                                                                 action="SaleTruePagination",
                                                                 getSale=True
                                                             ))
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Sale",
                                                                                               action="get_Sale"))

                    elif data.get('action') == "SaleTruePagination":
                        page = int(data.get('id'))
                        salesTrue = list(filter(lambda x: x.status, await CRUDSales.get_all()))

                        if salesTrue:
                            user = await CRUDUsers.get(id=salesTrue[page].user_id)
                            getDate = salesTrue[page].date.strftime('%Y-%m-%d %H:%M')

                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {salesTrue[page].sale_id}\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id {user.user_id}\n" \
                                   f"–ü—Ä–æ–¥–∞–µ—Ç {salesTrue[page].coin} - {salesTrue[page].quantity}\n" \
                                   f"–ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {salesTrue[page].price_per_unit} - {salesTrue[page].currency}\n\n" \
                                   f"–ï–†–ò–ü - {salesTrue[page].erip}\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - {getDate}"
                            await callback.message.delete()
                            await callback.message.answer(text=text,
                                                          reply_markup=await Users.pagination_sales_ikb(
                                                              target="Sale",
                                                              user_id=user.user_id,
                                                              action="SaleTruePagination",
                                                              getSale=True,
                                                              page=page)
                                                          )
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Sale",
                                                                                               action="get_Sale"))

                    elif data.get('action') == "SaleFalse":
                        salesFalse = list(filter(lambda x: x.status == False, await CRUDSales.get_all()))

                        if salesFalse:
                            user = await CRUDUsers.get(id=salesFalse[0].user_id)
                            getDate = salesFalse[0].date.strftime('%Y-%m-%d %H:%M')

                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {salesFalse[0].sale_id}\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id {user.user_id}\n" \
                                   f"–ü—Ä–æ–¥–∞–µ—Ç {salesFalse[0].coin} - {salesFalse[0].quantity}\n" \
                                   f"–ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {salesFalse[0].price_per_unit} - {salesFalse[0].currency}\n\n" \
                                   f"–ï–†–ò–ü - {salesFalse[0].erip}\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - {getDate}"
                            await callback.message.edit_text(text=text,
                                                             reply_markup=await Users.pagination_sales_ikb(
                                                                 target="Sale",
                                                                 user_id=user.user_id,
                                                                 action="SaleFalsePagination"
                                                             ))
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Sale",
                                                                                               action="get_Sale"))

                    elif data.get('action') == "SaleFalsePagination":
                        page = int(data.get('id'))
                        salesFalse = list(filter(lambda x: x.status == False, await CRUDSales.get_all()))

                        if salesFalse:
                            user = await CRUDUsers.get(id=salesFalse[page].user_id)
                            getDate = salesFalse[page].date.strftime('%Y-%m-%d %H:%M')

                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {salesFalse[page].sale_id}\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id {user.user_id}\n" \
                                   f"–ü—Ä–æ–¥–∞–µ—Ç {salesFalse[page].coin} - {salesFalse[page].quantity}\n" \
                                   f"–ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {salesFalse[page].price_per_unit} - {salesFalse[page].currency}\n\n" \
                                   f"–ï–†–ò–ü - {salesFalse[page].erip}\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - {getDate}"
                            await callback.message.delete()
                            await callback.message.answer(text=text,
                                                             reply_markup=await Users.pagination_sales_ikb(
                                                                 target="Sale",
                                                                 user_id=user.user_id,
                                                                 action="SaleFalsePagination",
                                                                 page=page))
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Sale",
                                                                                               action="get_Sale"))

                    elif data.get("action") == "saleCheckApproved":
                        page = int(data.get('id'))
                        approved = data.get('pagination')
                        get_user_id = int(data.get('editId'))

                        if approved == "False":
                            sales = list(filter(lambda x: x.status == False, await CRUDSales.get_all()))
                            action_back = "SaleFalsePagination"
                            getSale = False
                        else:
                            sales = list(filter(lambda x: x.status, await CRUDSales.get_all()))
                            action_back = "SaleTruePagination"
                            getSale = True

                        if sales:
                            user = await CRUDUsers.get(id=sales[page].user_id)
                            getDate = sales[page].date.strftime('%Y-%m-%d %H:%M')

                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {sales[page].sale_id}\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id {user.user_id}\n" \
                                   f"–ü—Ä–æ–¥–∞–µ—Ç {sales[page].coin} - {sales[page].quantity}\n" \
                                   f"–ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {sales[page].price_per_unit} - {sales[page].currency}\n\n" \
                                   f"–ï–†–ò–ü - {sales[page].erip}\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - {getDate}"
                            try:
                                await callback.message.delete()
                                photo = open(f'user_check/{sales[page].sale_id}_{get_user_id}.jpg', 'rb')
                                await bot.send_photo(chat_id=callback.from_user.id, photo=photo,
                                                     caption=f"<i>–°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                             f"{text}",
                                                     reply_markup=await Users.check_confirmation_ikb(
                                                         page=page,
                                                         sale_id=sales[page].id,
                                                         user_id=user.id,
                                                         target="Sale",
                                                         getSale=getSale,
                                                         action_back=action_back,
                                                         action_confirm="SaleApproved")
                                                     )
                            except FileNotFoundError:
                                pass

                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Sale",
                                                                                               action="get_Sale"))

                    elif data.get("action") == "SaleApproved":
                        sale_id = int(data.get('id'))
                        get_user_id = int(data.get('editId'))

                        sale = await CRUDSales.get(id=sale_id)
                        sale.status = True
                        await CRUDSales.update(sale=sale)
                        user = await CRUDUsers.get(id=get_user_id)
                        text = f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–∏–ª–∏ —Å–¥–µ–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}"

                        await callback.message.delete()
                        await callback.message.answer(text=text,
                                                      reply_markup=await AdminForm.start_ikb())

                        admin = callback.from_user.username
                        Username = f"@{admin}" if admin != "" else f"_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

                        getDate = sale.date.strftime('%Y-%m-%d %H:%M')

                        textApproved = f"‚úÖ –í–∞–º –æ–¥–æ–±—Ä–∏–ª–∏ —Å–¥–µ–ª–∫—É ‚Ññ {sale.sale_id}\n\n" \
                                       f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä :{Username}\n" \
                                       f"–ü—Ä–æ–¥–∞–∂–∞: {sale.coin} - {sale.quantity}\n"\
                                       f"–ü–æ–∫—É–ø–∫–∞: {sale.price_per_unit} - {sale.currency}\n"\
                                       f"–ï–†–ò–ü: {sale.erip}\n\n"\
                                       f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {getDate}"\

                        await bot.send_message(chat_id=user.user_id, text=textApproved)

                elif data.get('target') == "Buy":
                    if data.get('action') == "BuyTrue":
                        buyTrue = list(filter(lambda x: x.status, await CRUDPurchases.get_all()))

                        if buyTrue:
                            user = await CRUDUsers.get(id=buyTrue[0].user_id)
                            getDate = buyTrue[0].date.strftime('%Y-%m-%d %H:%M')

                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ <code>{buyTrue[0].purchase_id}</code>\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id <code>{user.user_id}</code>\n" \
                                   f"–ü–æ–ª—É—á–µ–Ω–æ <code>{buyTrue[0].price_per_unit} {buyTrue[0].currency}</code>\n" \
                                   f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <code> {buyTrue[0].quantity} {buyTrue[0].coin}</code>\n\n" \
                                   f"–ö–æ—à–µ–ª–µ–∫ - <code>{buyTrue[0].wallet}</code>\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - <code>{getDate}</code>"

                            await callback.message.edit_text(text=text,
                                                             parse_mode="HTML",
                                                             reply_markup=await Users.pagination_buy_ikb(
                                                                 target="Buy",
                                                                 user_id=user.user_id,
                                                                 action="BuyTruePagination",
                                                                 getBuy=True
                                                             ))
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Buy",
                                                                                               action="get_Buy"))

                    elif data.get('action') == "BuyTruePagination":
                        page = int(data.get('id'))
                        buyTrue = list(filter(lambda x: x.status, await CRUDPurchases.get_all()))

                        if buyTrue:
                            user = await CRUDUsers.get(id=buyTrue[page].user_id)
                            getDate = buyTrue[page].date.strftime('%Y-%m-%d %H:%M')

                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ <code>{buyTrue[page].purchase_id}</code>\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id <code>{user.user_id}</code>\n" \
                                   f"–ü–æ–ª—É—á–µ–Ω–æ <code>{buyTrue[page].price_per_unit} {buyTrue[page].currency}</code>\n" \
                                   f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <code> {buyTrue[page].quantity} {buyTrue[page].coin}</code>\n\n" \
                                   f"–ö–æ—à–µ–ª–µ–∫ - <code>{buyTrue[page].wallet}</code>\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - <code>{getDate}</code>"
                            await callback.message.delete()
                            await callback.message.answer(text=text,
                                                          reply_markup=await Users.pagination_buy_ikb(
                                                              target="Buy",
                                                              user_id=user.user_id,
                                                              action="BuyTruePagination",
                                                              getBuy=True,
                                                              page=page)
                                                          )
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Buy",
                                                                                               action="get_Buy"))

                    elif data.get('action') == "BuyFalse":
                        buyTrue = list(filter(lambda x: x.status == False, await CRUDPurchases.get_all()))

                        if buyTrue:
                            user = await CRUDUsers.get(id=buyTrue[0].user_id)
                            getDate = buyTrue[0].date.strftime('%Y-%m-%d %H:%M')

                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ <code>{buyTrue[0].purchase_id}</code>\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id <code>{user.user_id}</code>\n" \
                                   f"–ü–æ–ª—É—á–µ–Ω–æ <code>{buyTrue[0].price_per_unit} {buyTrue[0].currency}</code>\n" \
                                   f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <code> {buyTrue[0].quantity} {buyTrue[0].coin}</code>\n\n" \
                                   f"–ö–æ—à–µ–ª–µ–∫ - <code>{buyTrue[0].wallet}</code>\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - <code>{getDate}</code>"

                            await callback.message.edit_text(text=text,
                                                             parse_mode="HTML",
                                                             reply_markup=await Users.pagination_buy_ikb(
                                                                 target="Buy",
                                                                 user_id=user.user_id,
                                                                 action="BuyFalsePagination",
                                                             ))
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Buy",
                                                                                               action="get_Buy"))

                    elif data.get('action') == "BuyFalsePagination":
                        page = int(data.get('id'))
                        buyTrue = list(filter(lambda x: x.status == False, await CRUDPurchases.get_all()))

                        if buyTrue:
                            user = await CRUDUsers.get(id=buyTrue[page].user_id)
                            getDate = buyTrue[page].date.strftime('%Y-%m-%d %H:%M')

                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ <code>{buyTrue[page].purchase_id}</code>\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id <code>{user.user_id}</code>\n" \
                                   f"–ü–æ–ª—É—á–µ–Ω–æ <code>{buyTrue[page].price_per_unit} {buyTrue[page].currency}</code>\n" \
                                   f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <code> {buyTrue[page].quantity} {buyTrue[page].coin}</code>\n\n" \
                                   f"–ö–æ—à–µ–ª–µ–∫ - <code>{buyTrue[page].wallet}</code>\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - <code>{getDate}</code>"
                            await callback.message.delete()
                            await callback.message.answer(text=text,
                                                          reply_markup=await Users.pagination_buy_ikb(
                                                              target="Buy",
                                                              user_id=user.user_id,
                                                              action="BuyFalsePagination",
                                                              page=page)
                                                          )
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Buy",
                                                                                               action="get_Buy"))

                    elif data.get("action") == "buyCheckApproved":
                        page = int(data.get('id'))
                        approved = data.get('pagination')
                        get_user_id = int(data.get('editId'))

                        if approved == "False":
                            buys = list(filter(lambda x: x.status == False, await CRUDPurchases.get_all()))
                            action_back = "BuyFalsePagination"
                            getBuy = False
                        else:
                            buys = list(filter(lambda x: x.status, await CRUDPurchases.get_all()))
                            action_back = "BuyTruePagination"
                            getBuy = True

                        if buys:
                            user = await CRUDUsers.get(id=buys[page].user_id)
                            getDate = buys[page].date.strftime('%Y-%m-%d %H:%M')

                            text = f"–ó–∞—è–≤–∫–∞ ‚Ññ <code>{buys[page].purchase_id}</code>\n\n" \
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id <code>{user.user_id}</code>\n" \
                                   f"–ü–æ–ª—É—á–µ–Ω–æ <code>{buys[page].price_per_unit} {buys[page].currency}</code>\n" \
                                   f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <code> {buys[page].quantity} {buys[page].coin}</code>\n\n" \
                                   f"–ö–æ—à–µ–ª–µ–∫ - <code>{buys[page].wallet}</code>\n" \
                                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - <code>{getDate}</code>"
                            try:
                                await callback.message.delete()
                                photo = open(f'user_check/{buys[page].purchase_id}_{get_user_id}.jpg', 'rb')
                                await bot.send_photo(chat_id=callback.from_user.id, photo=photo,
                                                     caption=f"<i>–°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                             f"{text}",
                                                     reply_markup=await Users.check_confirmation_ikb(
                                                         page=page,
                                                         sale_id=buys[page].id,
                                                         user_id=user.id,
                                                         target="Buy",
                                                         getSale=getBuy,
                                                         action_back=action_back,
                                                         action_confirm="BuyApproved")
                                                     )
                            except FileNotFoundError:
                                pass

                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await Users.back_ikb(target="Buy",
                                                                                               action="get_Buy"))

                    elif data.get("action") == "BuyApproved":
                        purchase_id = int(data.get('id'))
                        get_user_id = int(data.get('editId'))

                        purchase = await CRUDPurchases.get(id=purchase_id)
                        purchase.status = True
                        await CRUDPurchases.update(purchase=purchase)

                        user = await CRUDUsers.get(id=get_user_id)
                        text = f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–∏–ª–∏ —Å–¥–µ–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user.user_id}</code>"

                        await callback.message.delete()
                        await callback.message.answer(text=text,
                                                      parse_mode="HTML",
                                                      reply_markup=await AdminForm.start_ikb())

                        admin = callback.from_user.username
                        Username = f"@{admin}" if admin != "" else f"_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

                        getDate = purchase.date.strftime('%Y-%m-%d %H:%M')

                        textApproved = f"‚úÖ –í–∞–º –æ–¥–æ–±—Ä–∏–ª–∏ —Å–¥–µ–ª–∫—É ‚Ññ <code>{purchase.purchase_id}</code>\n\n" \
                                       f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä :{Username}\n" \
                                       f"–ü—Ä–æ–¥–∞–∂–∞: <code>{purchase.price_per_unit} {purchase.currency}</code>\n"\
                                       f"–ü–æ–∫—É–ø–∫–∞: <code>{purchase.quantity} {purchase.coin}</code>\n"\
                                       f"–ö–æ—à–µ–ª–µ–∫ - <code>{purchase.wallet}</code>\n\n"\
                                       f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {getDate}"\

                        await bot.send_message(chat_id=user.user_id, text=textApproved, parse_mode="HTML")

        if message:
            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:

                if await state.get_state() == "AdminState:UsersId":
                    if message.text.isdigit():
                        user = await CRUDUsers.get(user_id=int(message.text))
                        if user:
                            await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                                 reply_markup=await Users.sell_or_buy_ikb(user_id=int(message.text)))
                            await state.finish()
                        else:
                            await message.answer(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                            await state.finish()
                    else:
                        await message.answer(text="–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä")
                        await AdminState.UsersId.set()
