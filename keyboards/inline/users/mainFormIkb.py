import logging

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BadRequest

from config import CONFIG
from handlers.users.Cryptocurrency import Cryptocurrency
from loader import bot
from states.users.userStates import UserStates

main_cb = CallbackData("main", "target", "action", "id", "editId")


class MainForms:
    @staticmethod
    async def abbreviation(coin: str):
        data = {
            "Bitcoin": "btc",
            "Litecoin": "ltc",
            "USDT(trc20)": "usdt",
            "Monero(XMR)": "xmr",
            "RUB": "‚ÇΩ",
            "BUN": "Br",
        }
        if coin in data:
            return data[coin]

    @staticmethod
    async def bue(coin: str, currency: str, amount: str):
        if coin == "RUB":
            price_BTC: float = await Cryptocurrency.get_btc()
            buy: float = round(float(amount) * price_BTC, 8)
            return buy

        elif coin == "BYN":
            price_BTC: float = await Cryptocurrency.get_btc()
            buy: float = round(float(amount) * price_BTC, 8)

            return buy

    @staticmethod
    async def main_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å",
                                         callback_data=main_cb.new("Buy", "getBuy", 0, 0)),
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å",
                                         callback_data=main_cb.new("Sell", "getSell", 0, 0))
                ],
                [
                    InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–Ω–∫—Ç—ã",
                                         callback_data=main_cb.new("Contacts", "getContacts", 0, 0)),
                    InlineKeyboardButton(text="–†–æ–∑—ã–≥—Ä—ã—à–∏", callback_data=main_cb.new("Raffles", "getRaffles", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def currency_ikb(target: str, action: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="BYN",
                                         callback_data=main_cb.new(target, action, "BUN", 0)),
                    InlineKeyboardButton(text="RUB",
                                         callback_data=main_cb.new(target, action, "RUB", 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Main", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def coin_ikb(target: str, action: str) -> InlineKeyboardMarkup:

        data = {
            "Bitcoin": {"target": target, "action": action, "id": "Bitcoin", "editId": 0},
            "‚ùåLitecoin": {"target": target, "action": action, "id": "Litecoin", "editId": 0},
            "‚ùåUSDT(trc20)": {"target": target, "action": action, "id": "USDT(trc20)", "editId": 0},
            "‚ùåMonero(XMR)": {"target": target, "action": action, "id": "Monero(XMR)", "editId": 0},
        }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name,
                                         callback_data=main_cb.new(name_items["target"],
                                                                   name_items["action"],
                                                                   name_items["id"],
                                                                   name_items["editId"])
                                         )
                ]for name, name_items in data.items()
            ] + [
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Buy", "getBuy", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def contacts_ikb() -> InlineKeyboardMarkup:
        data = {
            "–û—Ç–∑—ã–≤—ã": {"target": "Profile", "url": "https://t.me/ulad_islau"},
            "–ß–∞—Ç": {"target": "Profile", "url": "https://t.me/ulad_islau"},
            "–û–ø–µ—Ä–∞—Ç–æ—Ä": {"target": "Profile", "url": "https://t.me/ulad_islau"},
            "–û–ø–µ—Ä–∞—Ç–æ—Ä-–Ω–æ—á—å": {"target": "Profile", "url": "https://t.me/ulad_islau"},
        }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=name,
                                                         url=name_items['url']
                                                         )
                                ] for name, name_items in data.items()
                            ] +
                            [
                                [
                                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Main", 0, 0, 0))

                                ]

                            ]
        )

    @staticmethod
    async def raffles_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–õ–æ—Ç–µ—Ä–µ—è",
                                         callback_data=main_cb.new("Raffles", "getLottery", 0, 0)),
                    InlineKeyboardButton(text="–†—É–ª–µ—Ç–∫–∞",
                                         callback_data=main_cb.new("Raffles", "getRoulette", 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Main", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def confirmation_ikb(target: str, action: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)",
                                         callback_data=main_cb.new(target, action, 0, 0)),
                ],
                [
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=main_cb.new("Main", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def back_ikb(target: str, action: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, action, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def process(callback: CallbackQuery = None, message: Message = None, state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith("main"):
                data = main_cb.parse(callback_data=callback.data)

                if data.get("target") == "Main":
                    await state.finish()
                    text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ!"
                    await callback.message.edit_text(text=text,
                                                     reply_markup=await MainForms.main_ikb())

                elif data.get("target") == "Buy":
                    if data.get("action") == "getBuy":
                        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É."
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.currency_ikb(
                                                             target='Buy',
                                                             action='currency_buy')
                                                         )

                    elif data.get("action") == "currency_buy":
                        await state.update_data(currency=data.get("id"))
                        await state.update_data(currency_abbreviation=await MainForms.abbreviation(data.get("id")))
                        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å."
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.coin_ikb(target="Buy",
                                                                                               action="coin_buy")
                                                         )

                    elif data.get('action') == "coin_buy":
                        coin_id = data.get('id')
                        await state.update_data(coin=coin_id)
                        text = f'‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ {coin_id}\n' \
                               'ü§ñ–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'

                        await UserStates.Buy.set()
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.back_ikb("Buy", "currency_buy"))

                    elif data.get('action') == "confirmation_buy":
                        await callback.message.edit_text(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É!\n"
                                                              "(–¥–æ 2 –ú–±)")
                        #await UserStates.UserPhoto.set()

                elif data.get("target") == "Sell":
                    if data.get("action") == "getSell":
                        text = "–ü—Ä–æ–¥–∞—Ç—å"
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.main_ikb())

                elif data.get("target") == "Contacts":
                    if data.get("action") == "getContacts":
                        text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.contacts_ikb())

                elif data.get("target") == "Raffles":
                    if data.get("action") == "getRaffles":
                        text = "–†–æ–∑—ã–≥—Ä—ã—à–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞üòà"
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.raffles_ikb())

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                if await state.get_state() == "UserStates:Buy":
                    await state.update_data(amount=message.text)
                    get_state_data = await state.get_data()
                    abbreviation = await MainForms.abbreviation(get_state_data['coin'])

                    price_BTC: float = await Cryptocurrency.get_btc()
                    buy: float = round(float(message.text) * price_BTC, 8)
                    await state.update_data(buy=buy)
                    text = f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {message.text} {get_state_data['coin']}\n" \
                           f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {buy} {get_state_data['currency_abbreviation']}\n\n" \
                           f"üìù–í–≤–µ–¥–∏—Ç–µ {get_state_data['coin']}-–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, " \
                           f"–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {message.text} {abbreviation}"
                    await message.answer(text=text,
                                         reply_markup=await MainForms.back_ikb(target="Main", action="0"))
                    await UserStates.Wallet.set()

                elif await state.get_state() == "UserStates:Wallet":
                    await state.update_data(wallet=message.text)
                    get_state_data = await state.get_data()
                    text = f"‚úÖ–ó–∞—è–≤–∫–∞ ‚Ññ1 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n\n" \
                           f"–ü–æ–ª—É—á–∞–µ—Ç–µ: {get_state_data['amount']} {get_state_data['coin']}\n" \
                           f"{get_state_data['coin']}-–∞–¥—Ä–µ—Å: <code>{message.text}</code>\n\n" \
                           f"–í–∞—à —Ä–∞–Ω–≥: üë∂, —Å–∫–∏–¥–∫–∞ 0.0%\n\n" \
                           f"üíµ–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {get_state_data['buy']} {get_state_data['currency_abbreviation']}\n" \
                           f"–†–µ–∑–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n" \
                           f"üü¢ 2202206403717908\n\n" \
                           f"–°–ë–ü +79190480534 (–°–±–µ—Ä–±–∞–Ω–∫)\n\n" \
                           f"‚è≥–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: 15 –º–∏–Ω—É—Ç\n\n" \
                           f'‚òëÔ∏è–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ' \
                           f'"–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)" –∏–ª–∏ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É".'
                    await message.answer(text=text,
                                         reply_markup=await MainForms.confirmation_ikb(target="Buy",
                                                                                       action="confirmation_buy"),
                                         parse_mode="HTML")
                    #await state.finish()
