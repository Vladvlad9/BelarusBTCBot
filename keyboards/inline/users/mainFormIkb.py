import asyncio
import logging
import re
from decimal import Decimal

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BadRequest

from config import CONFIG
from crud import CRUDUsers
from crud.purchaseCRUD import CRUDPurchases
from crud.saleCRUD import CRUDSales
from crud.transactionCRUD import CRUDTransactions
from handlers.users.Cryptocurrency import Cryptocurrency
from loader import bot
from schemas import TransactionsSchema, PurchasesSchema, SalesSchema
from states.users.userStates import UserStates

main_cb = CallbackData("main", "target", "action", "id", "editId")


class MainForms:
    @staticmethod
    async def receipt(state, message) -> str:
        get_state_data = await state.get_data()

        if get_state_data['exchangeType'] == "buy":
            sell = f"<b>–ü—Ä–æ–¥–∞–µ—Ç–µ</b>: {get_state_data['buy']} {get_state_data['currency_abbreviation']}\n"
            get = f"üíµ<b>–ü–æ–ª—É—á–∞–µ—Ç–µ</b>: {get_state_data['amount']} {get_state_data['coin']}\n"
        else:
            sell = f"<b>–ü—Ä–æ–¥–∞–µ—Ç–µ</b>: {get_state_data['amount']} {get_state_data['coin']}\n"
            get = f"üíµ<b>–ü–æ–ª—É—á–∞–µ—Ç–µ</b>: {get_state_data['buy']} {get_state_data['currency_abbreviation']}\n"

        text = f"<b>‚úÖ–ó–∞—è–≤–∫–∞ ‚Ññ449112 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.</b>\n\n" \
               f"{sell}\n" \
               f"<b>–ï–†–ò–ü —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>: {get_state_data['erip']}\n\n" \
               f"–í–∞—à —Ä–∞–Ω–≥: üë∂, —Å–∫–∏–¥–∫–∞ 0.0%\n\n" \
               f"{get}\n" \
               f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {get_state_data['coin']}</b>:\n\n" \
               f"<code>{message.text}</code>\n\n" \
               f"‚è≥<b>–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞</b>: 15 –º–∏–Ω—É—Ç\n\n" \
               f'‚òëÔ∏è–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ' \
               f'"<b>–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)</b>" –∏–ª–∏ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É, ' \
               f'–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "<b>–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É</b>".'

        return text

    @staticmethod
    async def receipt2(state, message) -> str:
        get_state_data = await state.get_data()

        text = f"<b>‚úÖ–ó–∞—è–≤–∫–∞ ‚Ññ449112 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.</b>\n\n" \
               f"üíµ<b>–ü–æ–ª—É—á–∞–µ—Ç–µ</b>: {get_state_data['amount']} {get_state_data['coin']}\n" \
               f"<b>{get_state_data['coin']}-–∞–¥—Ä–µ—Å</b>:\n\n" \
               f"<code>{message.text}</code>\n\n" \
               f"–í–∞—à —Ä–∞–Ω–≥: üë∂, —Å–∫–∏–¥–∫–∞ 0.0%\n\n" \
               f"üíµ–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {get_state_data['buy']} {get_state_data['currency_abbreviation']}\n" \
               f"–†–µ–∑–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n" \
               f"- –ï–†–ò–ü –ü–õ–ê–¢–ï–ñ–ò\n" \
               f"- –ë–ê–ù–ö–û–í–°–ö–ò–ï –§–ò–ù–ê–ù–°–û–í–´–ï –£–°–õ–£–ì–ò\n" \
               f"- –ë–ê–ù–ö–ò –ù–ö–§–û\n" \
               f"- –ë–ê–ù–ö –î–ê–ë–†–ê–ë–´–¢\n" \
               f"- –ü–û–ü–û–õ–ù. –°–ß–ï–¢–ê –ü–û –ù–û–ú.–ö–ê–†–¢–´\n" \
               f"- 14276766\n\n" \
               f"‚è≥–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: 15 –º–∏–Ω—É—Ç\n\n" \
               f'‚òëÔ∏è–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ' \
               f'"<b>–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)</b>" –∏–ª–∏ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É, ' \
               f'–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "<b>–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É</b>".'

        # if get_state_data['exchangeType'] == "buy":
        #     sell = f"<b>–ü—Ä–æ–¥–∞–µ—Ç–µ</b>: {get_state_data['buy']} {get_state_data['currency_abbreviation']}\n"
        #     get = f"üíµ<b>–ü–æ–ª—É—á–∞–µ—Ç–µ</b>: {get_state_data['amount']} {get_state_data['coin']}\n"
        # else:
        #     sell = f"<b>–ü—Ä–æ–¥–∞–µ—Ç–µ</b>: {get_state_data['amount']} {get_state_data['coin']}\n"
        #     get = f"üíµ<b>–ü–æ–ª—É—á–∞–µ—Ç–µ</b>: {get_state_data['buy']} {get_state_data['currency_abbreviation']}\n"
        #
        # text = f"<b>‚úÖ–ó–∞—è–≤–∫–∞ ‚Ññ449112 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.</b>\n\n" \
        #        f"{sell}\n" \
        #        f"<b>–ï–†–ò–ü —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>: {get_state_data['erip']}\n\n" \
        #        f"–í–∞—à —Ä–∞–Ω–≥: üë∂, —Å–∫–∏–¥–∫–∞ 0.0%\n\n" \
        #        f"{get}\n" \
        #        f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {get_state_data['coin']}</b>:\n\n" \
        #        f"<code>{message.text}</code>\n\n" \
        #        f"‚è≥<b>–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞</b>: 15 –º–∏–Ω—É—Ç\n\n" \
        #        f'‚òëÔ∏è–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ' \
        #        f'"<b>–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)</b>" –∏–ª–∏ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É, ' \
        #        f'–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "<b>–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É</b>".'

        return text

    @staticmethod
    async def messageAdministrators(message, state, photo):
        state_data = await state.get_data()
        text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {1}\n\n" \
               f"–ò–º—è {message.from_user.first_name}\n" \
               f"–ü–æ–ª—É—á–µ–Ω–æ {state_data['currency_abbreviation']}: {state_data['buy']}\n" \
               f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å  {state_data['coin']}: {state_data['amount']}\n"

        tasks = []
        for admin in CONFIG.BOT.ADMINS:
            tasks.append(bot.send_photo(chat_id=admin, photo=photo,
                                        caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª!\n\n"
                                                f"{text}"))
        await asyncio.gather(*tasks, return_exceptions=True)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —Å—Ä–∞–∑—É
        await MainForms.confirmation_timer(message=message)

    @staticmethod
    async def confirmation_timer(message):
        await asyncio.sleep(3)
        await message.answer(text="–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
                             reply_markup=await MainForms.main_ikb())

    @staticmethod
    async def abbreviation(coin: str):
        data = {
            "Bitcoin": "btc",
            "Litecoin": "ltc",
            "USDT(trc20)": "usdt",
            "Monero(XMR)": "xmr",
            "RUB": "‚ÇΩ",
            "BYN": "Br",
        }
        if coin in data:
            return data[coin]

    @staticmethod
    async def buy(coin: str, currency: str, amount: str):
        if currency == "RUB":
            rub = await Cryptocurrency.get_rub()
            if coin == "Bitcoin":
                price_BTC: float = await Cryptocurrency.get_btc()
                buy: float = round(float(amount) * price_BTC * rub, 3)
                return buy

            elif coin == "Litecoin":
                get_ltc = await Cryptocurrency.get_ltc_to_rub()
                buy: float = round(float(amount) * get_ltc, 3)
                return buy

            elif coin == "USDT(trc20)":
                get_trc: float = await Cryptocurrency.get_trx()
                buy: float = round(float(amount) * get_trc * rub, 3)
                return buy

            elif coin == "Monero(XMR)":
                get_xmr: float = await Cryptocurrency.get_trx()
                buy: float = round(float(amount) * get_xmr * rub, 3)
                return buy

        elif currency == "BYN":
            byn = await Cryptocurrency.get_byn()
            if coin == "Bitcoin":
                price_BTC: float = await Cryptocurrency.get_btc()
                buy: float = round(float(amount) * price_BTC * byn, 3)
                return buy

            elif coin == "Litecoin":
                get_ltc: float = await Cryptocurrency.get_ltc()
                buy: float = round(float(amount) * get_ltc * byn, 3)
                return buy

            elif coin == "USDT(trc20)":
                get_trc: float = await Cryptocurrency.get_trx()
                buy: float = round(float(amount) * get_trc * byn, 3)
                return buy

            elif coin == "Monero(XMR)":
                get_xmr: float = await Cryptocurrency.get_xmr()
                buy: float = round(float(amount) * get_xmr * byn, 3)
                return buy

    @staticmethod
    async def buy_to_currency(coin: str, currency: str, amount: str):

        """
            This static method calculates the amount of a specific cryptocurrency that can be bought with a given amount
            of currency.

            Parameters:
            - coin (str): The name of the cryptocurrency.
            - currency (str): The currency to be used for the purchase.
            - amount (str): The amount of currency to be used for the purchase.

            Returns:
            buy (float): The amount of cryptocurrency that can be bought with the given amount of currency.

            Note:
            The method uses the `Cryptocurrency` class to fetch the current prices of the cryptocurrencies.

            Example:
            Suppose we want to buy Bitcoin (BTC) with 100 RUB. We can call the method as follows:

            result = await Cryptocurrency.buy_to_currency("Bitcoin", "RUB", "100")
            print(result)
            0.00123456

            The method will return the amount of Bitcoin that can be bought with 100 RUB, rounded to 8 decimal places.
            """

        if currency == "RUB":
            if coin == "Bitcoin":
                price_BTC = await Cryptocurrency.get_btc()
                return round(Decimal(amount) / Decimal(price_BTC), 3)

            elif coin == "Litecoin":
                get_ltc = await Cryptocurrency.get_ltc_to_rub()
                return round(Decimal(amount) / Decimal(get_ltc), 3)

            elif coin == "USDT(trc20)":
                get_trc = await Cryptocurrency.get_trx()
                return round(Decimal(amount) / Decimal(get_trc), 3)

            elif coin == "Monero(XMR)":
                get_xmr = await Cryptocurrency.get_trx()
                return round(Decimal(amount) / Decimal(get_xmr), 3)

        elif currency == "BYN":
            if coin == "Bitcoin":
                price_BTC: float = await Cryptocurrency.get_btc()
                return round(Decimal(amount) / Decimal(price_BTC), 8)

            elif coin == "Litecoin":
                get_ltc: float = await Cryptocurrency.get_ltc()
                return round(Decimal(amount) / Decimal(get_ltc), 8)

            elif coin == "USDT(trc20)":
                get_trc: float = await Cryptocurrency.get_trx()
                return round(Decimal(amount) / Decimal(get_trc), 8)

            elif coin == "Monero(XMR)":
                get_xmr: float = await Cryptocurrency.get_xmr()
                return round(Decimal(amount) / Decimal(get_xmr), 8)

    @staticmethod
    async def main_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å",
                                         callback_data=main_cb.new("Buy", "getBuy", 0, 0)),
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å",
                                         callback_data=main_cb.new("Sell", "getSell", 0, 0))
                ],
                [
                    InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–Ω–∫—Ç—ã",
                                         callback_data=main_cb.new("Contacts", "getContacts", 0, 0)),
                    InlineKeyboardButton(text="–†–æ–∑—ã–≥—Ä—ã—à–∏", callback_data=main_cb.new("Raffles", "getRaffles", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def currency_ikb(target: str, action: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="BYN",
                                         callback_data=main_cb.new(target, action, "BYN", 0)),
                    InlineKeyboardButton(text="RUB",
                                         callback_data=main_cb.new(target, action, "RUB", 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Main", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def coin_ikb(target: str, action: str) -> InlineKeyboardMarkup:

        data = {
            "Bitcoin": {"target": target, "action": action, "id": "Bitcoin", "editId": 0},
            "Litecoin": {"target": target, "action": action, "id": "Litecoin", "editId": 0},
            "USDT(trc20)": {"target": target, "action": action, "id": "USDT(trc20)", "editId": 0},
            "Monero(XMR)": {"target": target, "action": action, "id": "Monero(XMR)", "editId": 0},
        }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=name,
                                                         callback_data=main_cb.new(name_items["target"],
                                                                                   name_items["action"],
                                                                                   name_items["id"],
                                                                                   name_items["editId"])
                                                         )
                                ] for name, name_items in data.items()
                            ] + [
                                [
                                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                                         callback_data=main_cb.new("Buy", "getBuy", 0, 0))
                                ]
                            ]
        )

    @staticmethod
    async def contacts_ikb() -> InlineKeyboardMarkup:
        data = {
            "–û—Ç–∑—ã–≤—ã": {"target": "Profile", "url": "https://t.me/ulad_islau"},
            "–ß–∞—Ç": {"target": "Profile", "url": "https://t.me/ulad_islau"},
            "–û–ø–µ—Ä–∞—Ç–æ—Ä": {"target": "Profile", "url": "https://t.me/ulad_islau"},
            "–û–ø–µ—Ä–∞—Ç–æ—Ä-–Ω–æ—á—å": {"target": "Profile", "url": "https://t.me/ulad_islau"},
        }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=name,
                                                         url=name_items['url']
                                                         )
                                ] for name, name_items in data.items()
                            ] +
                            [
                                [
                                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Main", 0, 0, 0))

                                ]

                            ]
        )

    @staticmethod
    async def raffles_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–õ–æ—Ç–µ—Ä–µ—è",
                                         callback_data=main_cb.new("Raffles", "getLottery", 0, 0)),
                    InlineKeyboardButton(text="–†—É–ª–µ—Ç–∫–∞",
                                         callback_data=main_cb.new("Raffles", "getRoulette", 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Main", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def confirmation_ikb(target: str, action: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)",
                                         callback_data=main_cb.new(target, action, 0, 0)),
                ],
                [
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=main_cb.new("Main", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def back_ikb(target: str, action: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, action, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def isfloat(value: str):
        try:
            float(value)
            return True
        except ValueError:
            return False

    @staticmethod
    async def process(callback: CallbackQuery = None, message: Message = None, state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith("main"):
                data = main_cb.parse(callback_data=callback.data)

                if data.get("target") == "Main":
                    await state.finish()
                    text = "üöÄüöÄüöÄ–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞üöÄüöÄüöÄ–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:\n\n" \
                           "‚ú≥Ô∏è–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –¥–æ 3Ô∏è‚É£0Ô∏è‚É£ –º–∏–Ω—É—Ç üöÄ\n" \
                           "‚ú≥Ô∏è–í—ã–≥–æ–¥–Ω—ã–π –∫—É—Ä—Å –Ω–∞ –æ–±–º–µ–Ωüëå\n" \
                           "‚ú≥Ô∏è–†–∞–±–æ—Ç–∞–µ–º 2Ô∏è‚É£4Ô∏è‚É£‚ö°Ô∏è7Ô∏è‚É£\n" \
                           "‚ú≥Ô∏è–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ ü§ó –∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ üòéüì≤\n" \
                           "‚ú≥Ô∏è–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å üîê\n" \
                           "–ú—ã —Ü–µ–Ω–∏–º –í–∞—Åüòú –∏ –í–∞—à–µ –≤—Ä–µ–º—èüöÄ–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–ª–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üîê\n\n" \
                           "–ù–∞—à –±–æ—Çü§ñ -\n" \
                           "–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Äüòé -\n\n" \
                           "üòé–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –í–∞—à üòé"
                    await callback.message.edit_text(text=text,
                                                     reply_markup=await MainForms.main_ikb())

                elif data.get("target") == "Buy":
                    if data.get("action") == "getBuy":
                        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É."
                        await state.update_data(exchangeType="buy")
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.currency_ikb(
                                                             target='Buy',
                                                             action='currency_buy')
                                                         )

                    elif data.get("action") == "currency_buy":
                        await state.update_data(currency=data.get("id"))
                        await state.update_data(currency_abbreviation=await MainForms.abbreviation(data.get("id")))
                        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.coin_ikb(target="Buy",
                                                                                               action="coin_buy")
                                                         )

                    elif data.get('action') == "coin_buy":
                        coin_id = data.get('id')
                        await state.update_data(coin=coin_id)
                        text = f'‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ {coin_id} –∏–ª–∏ –≤ —Ä—É–±–ª—è—Ö\n' \
                               'ü§ñ–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'

                        await UserStates.Buy.set()
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.back_ikb("Buy", "currency_buy"))

                    elif data.get('action') == "confirmation_buy":
                        await callback.message.edit_text(text="üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞, –ª–∏–±–æ —á–µ–∫ –æ–ø–ª–∞—Ç—ã!")
                        await UserStates.UserPhoto.set()

                elif data.get("target") == "Sell":
                    if data.get("action") == "getSell":
                        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É."
                        await state.update_data(exchangeType="sell")
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.currency_ikb(
                                                             target='Sell',
                                                             action='currency_buy')
                                                         )

                    elif data.get("action") == "currency_buy":
                        await state.update_data(currency=data.get("id"))
                        await state.update_data(currency_abbreviation=await MainForms.abbreviation(data.get("id")))
                        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å."
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.coin_ikb(target="Sell",
                                                                                               action="coin_buy")
                                                         )

                    elif data.get('action') == "coin_buy":
                        coin_id = data.get('id')
                        await state.update_data(coin=coin_id)
                        text = f'‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ {coin_id} –∏–ª–∏ –≤ —Ä—É–±–ª—è—Ö\n' \
                               'ü§ñ–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'

                        await UserStates.Buy.set()
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.back_ikb(target="Sell",
                                                                                               action="currency_buy"))

                    elif data.get('action') == "confirmation_buy":
                        await callback.message.edit_text(text="üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞, –ª–∏–±–æ —á–µ–∫ –æ–ø–ª–∞—Ç—ã!")
                        await UserStates.UserPhoto.set()

                elif data.get("target") == "Contacts":
                    if data.get("action") == "getContacts":
                        text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.contacts_ikb())

                elif data.get("target") == "Raffles":
                    if data.get("action") == "getRaffles":
                        text = "–†–æ–∑—ã–≥—Ä—ã—à–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞üòà"
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.raffles_ikb())

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                # if await state.get_state() == "UserStates:Buy":
                #     await state.update_data(amount=message.text)
                #     get_state_data = await state.get_data()
                #     abbreviation = await MainForms.abbreviation(get_state_data['coin'])
                #
                #     if get_state_data['currency'] == "RUB":
                #
                #         try:
                #             if len(message.text) < 3:
                #                 buy = await MainForms.buy(coin=get_state_data['coin'],
                #                                           currency=get_state_data['currency'],
                #                                           amount=get_state_data['amount'])
                #
                #                 text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                #                        f"{message.text} {abbreviation}"
                #
                #                 await state.update_data(buy=buy)
                #                 await message.answer(text=text,
                #                                      reply_markup=await MainForms.back_ikb(target="Main", action="0"),
                #                                      parse_mode="HTML")
                #                 await UserStates.ERIP.set()
                #
                #             elif message.text.find("0") != -1:
                #                 buy = await MainForms.buy(coin=get_state_data['coin'],
                #                                           currency=get_state_data['currency'],
                #                                           amount=get_state_data['amount'])
                #
                #                 text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                #                        f"{buy} {get_state_data['currency']}"
                #
                #                 await state.update_data(buy=buy)
                #                 await message.answer(text=text,
                #                                      reply_markup=await MainForms.back_ikb(target="Main", action="0"))
                #                 await UserStates.ERIP.set()
                #
                #             else:
                #                 buy = await MainForms.buy_to_currency(coin=get_state_data['coin'],
                #                                                       currency=get_state_data['currency'],
                #                                                       amount=get_state_data['amount'])
                #
                #                 text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                #                        f"{buy} {abbreviation}"
                #
                #                 await state.update_data(buy=buy)
                #                 await message.answer(text=text,
                #                                      reply_markup=await MainForms.back_ikb(target="Main", action="0"))
                #                 await UserStates.ERIP.set()
                #         except Exception as e:
                #             await message.answer(text="–ù–µ –≤–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ",
                #                                  reply_markup=await MainForms.back_ikb(target="Main", action="0"))
                #             await UserStates.Buy.set()
                #             logging.error(f"Error {e}")
                #
                #     elif get_state_data['currency'] == 'BYN':
                #         try:
                #             if len(message.text) < 3:
                #                 buy = await MainForms.buy(coin=get_state_data['coin'],
                #                                           currency=get_state_data['currency'],
                #                                           amount=get_state_data['amount'])
                #
                #                 text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                #                        f"{message.text} {abbreviation}"
                #
                #                 await state.update_data(buy=buy)
                #                 await message.answer(text=text,
                #                                      reply_markup=await MainForms.back_ikb(target="Main", action="0"))
                #                 await UserStates.ERIP.set()
                #
                #             elif message.text.find("0") != -1:
                #                 buy = await MainForms.buy(coin=get_state_data['coin'],
                #                                           currency=get_state_data['currency'],
                #                                           amount=get_state_data['amount'])
                #
                #                 text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                #                        f"{buy} {get_state_data['currency']}"
                #
                #                 await state.update_data(buy=buy)
                #                 await message.answer(text=text,
                #                                      reply_markup=await MainForms.back_ikb(target="Main", action="0"))
                #                 await UserStates.ERIP.set()
                #
                #             else:
                #                 buy = await MainForms.buy_to_currency(coin=get_state_data['coin'],
                #                                                       currency=get_state_data['currency'],
                #                                                       amount=get_state_data['amount'])
                #
                #                 text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                #                        f"{buy} {abbreviation}"
                #
                #                 await state.update_data(buy=buy)
                #                 await message.answer(text=text,
                #                                      reply_markup=await MainForms.back_ikb(target="Main", action="0"))
                #                 await UserStates.ERIP.set()
                #         except Exception as e:
                #             await message.answer(text="–ù–µ –≤–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞\n"
                #                                       "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                #                                  reply_markup=await MainForms.back_ikb(target="Main", action="0"))
                #             await UserStates.Buy.set()
                #             logging.error(f"Error {e}")

                if await state.get_state() == "UserStates:Buy":
                    await state.update_data(amount=message.text)
                    get_state_data = await state.get_data()
                    abbreviation = await MainForms.abbreviation(get_state_data['coin'])

                    try:
                        if len(message.text) < 3:
                            buy = await MainForms.buy(coin=get_state_data['coin'],
                                                      currency=get_state_data['currency'],
                                                      amount=get_state_data['amount'])

                            if get_state_data['exchangeType'] == "sell":
                                text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                                       f"{buy} {get_state_data['currency']}" \
                                    if get_state_data['exchangeType'] == "sell" \
                                    else f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                                         f"{message.text} {abbreviation}"

                                await UserStates.ERIP.set()
                            else:
                                text = f"üìù–í–≤–µ–¥–∏—Ç–µ {get_state_data['coin']}-–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞," \
                                       f"–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å " \
                                       f"{get_state_data['amount']} {abbreviation}"
                                await message.answer(text=f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {get_state_data['amount']} "
                                                          f"{abbreviation}\n"
                                                          f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {buy} "
                                                          f"{get_state_data['currency']}\n\n")

                                await UserStates.Wallet.set()

                        elif message.text.find("0") != -1:
                            buy = await MainForms.buy(coin=get_state_data['coin'],
                                                      currency=get_state_data['currency'],
                                                      amount=get_state_data['amount'])

                            if get_state_data['exchangeType'] == "sell":
                                text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                                       f"{buy} {get_state_data['currency']}" \
                                    if get_state_data['exchangeType'] == "sell" \
                                    else f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                                         f"{buy} {get_state_data['currency']}"

                                await UserStates.ERIP.set()
                            else:
                                text = f"üìù–í–≤–µ–¥–∏—Ç–µ {get_state_data['coin']}-–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞," \
                                       f"–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å " \
                                       f"{get_state_data['amount']} {abbreviation}"
                                await message.answer(text=f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {get_state_data['amount']} "
                                                          f"{abbreviation}\n"
                                                          f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {buy} "
                                                          f"{get_state_data['currency']}\n\n")

                                await UserStates.Wallet.set()

                            # text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                            #        f"{buy} {get_state_data['currency']}"

                        else:
                            buy = await MainForms.buy_to_currency(coin=get_state_data['coin'],
                                                                  currency=get_state_data['currency'],
                                                                  amount=get_state_data['amount'])

                            if get_state_data['exchangeType'] == "sell":
                                text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                                       f"{buy} {get_state_data['currency']}" \
                                    if get_state_data['exchangeType'] == "sell" \
                                    else f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
                                         f"{buy} {abbreviation}"

                                await UserStates.ERIP.set()
                            else:
                                text = f"üìù–í–≤–µ–¥–∏—Ç–µ {get_state_data['coin']}-–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞,"\
                                       f"–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "\
                                       f"{get_state_data['amount']} {abbreviation}"

                                await message.answer(text=f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {get_state_data['amount']} "
                                                          f"{abbreviation}\n"
                                                          f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {buy} "
                                                          f"{get_state_data['currency']}\n\n")

                                await UserStates.Wallet.set()

                            # text = f"–í–≤–µ–¥–∏—Ç–µ <b>–ï–†–ò–ü –†–ë</b> —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å {buy} {abbreviation}"

                        await state.update_data(buy=buy)
                        await message.answer(text=text,
                                             reply_markup=await MainForms.back_ikb(target="Main", action="0"),
                                             parse_mode="HTML")

                    except Exception as e:
                        await message.answer(text="–ù–µ –≤–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ",
                                             reply_markup=await MainForms.back_ikb(target="Main", action="0"))
                        await UserStates.Buy.set()
                        logging.error(f"Error {e}")

                elif await state.get_state() == "UserStates:ERIP":
                    if re.match(r"^[0-9]{11}$", message.text):
                        get_state_data = await state.get_data()
                        abbreviation = await MainForms.abbreviation(get_state_data['coin'])

                        # text = f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {get_state_data['amount']} {abbreviation}\n" \
                        #        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {get_state_data['buy']} {get_state_data['currency']}\n\n"

                        text = "‚úÖ–ó–∞—è–≤–∫–∞ ‚Ññ169916 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n\n" \
                               f"–ü—Ä–æ–¥–∞–µ—Ç–µ: {get_state_data['buy']} {get_state_data['currency_abbreviation']}\n" \
                               f"–ï–†–ò–ü –†–ë —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{message.text}</code>\n\n" \
                               "–í–∞—à —Ä–∞–Ω–≥: üë∂, —Å–∫–∏–¥–∫–∞ 0.0%\n\n" \
                               f"üíµ–ü–æ–ª—É—á–∞–µ—Ç–µ: <code>{get_state_data['amount']} {get_state_data['coin']}</code>\n" \
                               f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {get_state_data['currency_abbreviation']}:\n\n" \
                               "<code>____________________</code>\n\n" \
                               "‚è≥–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: 15 –º–∏–Ω—É—Ç\n\n" \
                               '‚òëÔ∏è–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ—à–µ–ª—å–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ' \
                               '"–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)" –∏–ª–∏ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É, ' \
                               '–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É".'

                        # await message.answer(text=text,
                        #                      reply_markup=await MainForms.back_ikb(target="Main",
                        #                                                            action="0"))

                        await message.answer(text=text,
                                             reply_markup=await MainForms.confirmation_ikb(target="Sell",
                                                                                           action="confirmation_buy"),
                                             parse_mode="HTML")

                        await state.update_data(erip=message.text)

                        # await UserStates.Wallet.set()
                    else:
                        text = "–ï–†–ò–ü –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ\n" \
                               "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑"
                        await message.answer(text=text,
                                             reply_markup=await MainForms.back_ikb(target="Main", action="0"))

                elif await state.get_state() == "UserStates:Wallet":
                    wallet = await Cryptocurrency.Check_Wallet(btc_address=message.text)
                    get_state_data = await state.get_data()
                    if wallet:
                        await state.update_data(wallet=message.text)
                        if get_state_data['exchangeType'] == "buy":
                            text = await MainForms.receipt2(state=state, message=message)

                        await message.answer(text=text,
                                             reply_markup=await MainForms.confirmation_ikb(target="Buy",
                                                                                           action="confirmation_buy"),
                                             parse_mode="HTML")
                    else:
                        text = f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ <i>{message.text}</i> –Ω–µ—Ç—É –≤ blockchain\n" \
                               f"–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∞–¥—Ä–µ—Å"
                        await message.answer(text=text, parse_mode="HTML",
                                             reply_markup=await MainForms.back_ikb(target="Main", action=""))

                elif await state.get_state() == "UserStates:UserPhoto":
                    if message.content_type == "photo":
                        if message.photo[0].file_size > 2000:
                            await message.answer(text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 –º–±\n"
                                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑")
                            await UserStates.UserPhoto.set()
                        else:
                            get_photo = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
                            photo = message.photo[0].file_id

                            try:
                                user = await CRUDUsers.get(user_id=message.from_user.id)
                                get_state_data = await state.get_data()

                                if get_state_data['exchangeType'] == "buy":
                                    purchase = await CRUDPurchases.add(purchase=PurchasesSchema(
                                        user_id=user.id,
                                        currency=get_state_data['currency'],
                                        quantity=get_state_data['amount'],
                                        coin=get_state_data['coin'],
                                        price_per_unit=get_state_data['buy'],
                                        wallet=get_state_data['wallet']
                                    ))
                                    transaction = await CRUDTransactions.add(transaction=TransactionsSchema(
                                        purchase_id=purchase.id
                                    ))

                                if get_state_data['exchangeType'] == "sell":
                                    sale = await CRUDSales.add(sale=SalesSchema(
                                        user_id=user.id,
                                        currency=get_state_data['currency'],
                                        quantity=get_state_data['amount'],
                                        coin=get_state_data['coin'],
                                        price_per_unit=get_state_data['buy'],
                                        erip=get_state_data['erip']
                                    ))
                                    transaction = await CRUDTransactions.add(transaction=TransactionsSchema(
                                        sale_id=sale.id
                                    ))
                            except Exception as e:
                                logging.error(f'Error add —á—Ç–æ –ø—Ä–æ–∏—Å–æ–¥–∏—Ç —è —Ö–∑ in db: {e}')

                            try:
                                if transaction:
                                    await bot.download_file(file_path=get_photo.file_path,
                                                            destination=f'user_check/{1}_{message.from_user.id}.jpg',
                                                            timeout=12,
                                                            chunk_size=1215000)

                                    await MainForms.messageAdministrators(message=message, state=state, photo=photo)

                                    await state.finish()
                                else:
                                    await message.answer(text="–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ "
                                                              "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                                                         reply_markup=await MainForms.back_ikb(target="Main",
                                                                                               action=""))
                            except Exception as e:
                                logging.error(f'Error UserStates:UserPhoto: {e}')
